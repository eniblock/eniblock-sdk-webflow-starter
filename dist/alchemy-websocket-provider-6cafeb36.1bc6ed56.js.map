{"mappings":"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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-ecb5e0989f9398bc.js","node_modules/alchemy-sdk/dist/esm/alchemy-websocket-provider-6cafeb36.js","node_modules/alchemy-sdk/src/internal/websocket-backfiller.ts","node_modules/alchemy-sdk/src/api/alchemy-websocket-provider.ts","node_modules/sturdy-websocket/dist/index.js","node_modules/sturdy-websocket/src/index.ts"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = 50619;var HMR_SECURE = false;var HMR_ENV_HASH = \"d6ea1d42532a7575\";module.bundle.HMR_BUNDLE_ID = \"710863cc1bc6ed56\";\"use strict\";\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: {|[string]: mixed|};\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n    getURL(url: string): string;\n    getManifest(): {manifest_version: number, ...};\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\ndeclare var __parcel__import__: (string) => Promise<void>;\ndeclare var __parcel__importScripts__: (string) => Promise<void>;\ndeclare var globalThis: typeof self;\ndeclare var ServiceWorkerGlobalScope: Object;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData[moduleName],\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData[moduleName] = undefined;\n}\nmodule.bundle.Module = Module;\nmodule.bundle.hotData = {};\nvar checkedAssets /*: {|[string]: boolean|} */, assetsToDispose /*: Array<[ParcelRequire, string]> */, assetsToAccept /*: Array<[ParcelRequire, string]> */;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\nfunction getPort() {\n  return HMR_PORT || location.port;\n}\n\n// eslint-disable-next-line no-redeclare\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';\n  var ws;\n  try {\n    ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');\n  } catch (err) {\n    if (err.message) {\n      console.error(err.message);\n    }\n    ws = {};\n  }\n\n  // Web extension context\n  var extCtx = typeof browser === 'undefined' ? typeof chrome === 'undefined' ? null : chrome : browser;\n\n  // Safari doesn't support sourceURL in error stacks.\n  // eval may also be disabled via CSP, so do a quick check.\n  var supportsSourceURL = false;\n  try {\n    (0, eval)('throw new Error(\"test\"); //# sourceURL=test.js');\n  } catch (err) {\n    supportsSourceURL = err.stack.includes('test.js');\n  }\n\n  // $FlowFixMe\n  ws.onmessage = async function (event /*: {data: string, ...} */) {\n    checkedAssets = {} /*: {|[string]: boolean|} */;\n    assetsToAccept = [];\n    assetsToDispose = [];\n    var data /*: HMRMessage */ = JSON.parse(event.data);\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH);\n\n      // Handle HMR Update\n      let handled = assets.every(asset => {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n      if (handled) {\n        console.clear();\n\n        // Dispatch custom event so other runtimes (e.g React Refresh) are aware.\n        if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n          window.dispatchEvent(new CustomEvent('parcelhmraccept'));\n        }\n        await hmrApplyUpdates(assets);\n\n        // Dispose all old assets.\n        let processedAssets = {} /*: {|[string]: boolean|} */;\n        for (let i = 0; i < assetsToDispose.length; i++) {\n          let id = assetsToDispose[i][1];\n          if (!processedAssets[id]) {\n            hmrDispose(assetsToDispose[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n\n        // Run accept callbacks. This will also re-execute other disposed assets in topological order.\n        processedAssets = {};\n        for (let i = 0; i < assetsToAccept.length; i++) {\n          let id = assetsToAccept[i][1];\n          if (!processedAssets[id]) {\n            hmrAccept(assetsToAccept[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n      } else fullReload();\n    }\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      for (let ansiDiagnostic of data.diagnostics.ansi) {\n        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n        console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n      }\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html);\n        // $FlowFixMe\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n  ws.onerror = function (e) {\n    if (e.message) {\n      console.error(e.message);\n    }\n  };\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n        <div>\n          ${diagnostic.hints.map(hint => '<div>💡 ' + hint + '</div>').join('')}\n        </div>\n        ${diagnostic.documentation ? `<div>📝 <a style=\"color: violet\" href=\"${diagnostic.documentation}\" target=\"_blank\">Learn more</a></div>` : ''}\n      </div>\n    `;\n  }\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\nfunction fullReload() {\n  if ('reload' in location) {\n    location.reload();\n  } else if (extCtx && extCtx.runtime && extCtx.runtime.reload) {\n    extCtx.runtime.reload();\n  }\n}\nfunction getParents(bundle, id) /*: Array<[ParcelRequire, string]> */{\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n  var parents = [];\n  var k, d, dep;\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n  return parents;\n}\nfunction updateLink(link) {\n  var href = link.getAttribute('href');\n  if (!href) {\n    return;\n  }\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n  newLink.setAttribute('href',\n  // $FlowFixMe\n  href.split('?')[0] + '?' + Date.now());\n  // $FlowFixMe\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href /*: string */ = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n    cssTimeout = null;\n  }, 50);\n}\nfunction hmrDownload(asset) {\n  if (asset.type === 'js') {\n    if (typeof document !== 'undefined') {\n      let script = document.createElement('script');\n      script.src = asset.url + '?t=' + Date.now();\n      if (asset.outputFormat === 'esmodule') {\n        script.type = 'module';\n      }\n      return new Promise((resolve, reject) => {\n        var _document$head;\n        script.onload = () => resolve(script);\n        script.onerror = reject;\n        (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);\n      });\n    } else if (typeof importScripts === 'function') {\n      // Worker scripts\n      if (asset.outputFormat === 'esmodule') {\n        return __parcel__import__(asset.url + '?t=' + Date.now());\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            __parcel__importScripts__(asset.url + '?t=' + Date.now());\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }\n  }\n}\nasync function hmrApplyUpdates(assets) {\n  global.parcelHotUpdate = Object.create(null);\n  let scriptsToRemove;\n  try {\n    // If sourceURL comments aren't supported in eval, we need to load\n    // the update from the dev server over HTTP so that stack traces\n    // are correct in errors/logs. This is much slower than eval, so\n    // we only do it if needed (currently just Safari).\n    // https://bugs.webkit.org/show_bug.cgi?id=137297\n    // This path is also taken if a CSP disallows eval.\n    if (!supportsSourceURL) {\n      let promises = assets.map(asset => {\n        var _hmrDownload;\n        return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch(err => {\n          // Web extension fix\n          if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {\n            extCtx.runtime.reload();\n            return;\n          }\n          throw err;\n        });\n      });\n      scriptsToRemove = await Promise.all(promises);\n    }\n    assets.forEach(function (asset) {\n      hmrApply(module.bundle.root, asset);\n    });\n  } finally {\n    delete global.parcelHotUpdate;\n    if (scriptsToRemove) {\n      scriptsToRemove.forEach(script => {\n        if (script) {\n          var _document$head2;\n          (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);\n        }\n      });\n    }\n  }\n}\nfunction hmrApply(bundle /*: ParcelRequire */, asset /*:  HMRAsset */) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        let oldDeps = modules[asset.id][1];\n        for (let dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            let id = oldDeps[dep];\n            let parents = getParents(module.bundle.root, id);\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n      if (supportsSourceURL) {\n        // Global eval. We would use `new Function` here but browser\n        // support for source maps is better with eval.\n        (0, eval)(asset.output);\n      }\n\n      // $FlowFixMe\n      let fn = global.parcelHotUpdate[asset.id];\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\nfunction hmrDelete(bundle, id) {\n  let modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    let deps = modules[id][1];\n    let orphans = [];\n    for (let dep in deps) {\n      let parents = getParents(module.bundle.root, deps[dep]);\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    }\n\n    // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n    delete modules[id];\n    delete bundle.cache[id];\n\n    // Now delete the orphans.\n    orphans.forEach(id => {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\nfunction hmrAcceptCheck(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  }\n\n  // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n  let parents = getParents(module.bundle.root, id);\n  let accepted = false;\n  while (parents.length > 0) {\n    let v = parents.shift();\n    let a = hmrAcceptCheckOne(v[0], v[1], null);\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else {\n      // Otherwise, queue the parents in the next level upward.\n      let p = getParents(module.bundle.root, v[1]);\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n      parents.push(...p);\n    }\n  }\n  return accepted;\n}\nfunction hmrAcceptCheckOne(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n  if (checkedAssets[id]) {\n    return true;\n  }\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToDispose.push([bundle, id]);\n  if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {\n    assetsToAccept.push([bundle, id]);\n    return true;\n  }\n}\nfunction hmrDispose(bundle /*: ParcelRequire */, id /*: string */) {\n  var cached = bundle.cache[id];\n  bundle.hotData[id] = {};\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData[id];\n  }\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData[id]);\n    });\n  }\n  delete bundle.cache[id];\n}\nfunction hmrAccept(bundle /*: ParcelRequire */, id /*: string */) {\n  // Execute the module.\n  bundle(id);\n\n  // Run the accept callbacks in the new version of the module.\n  var cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        assetsToAlsoAccept.forEach(function (a) {\n          hmrDispose(a[0], a[1]);\n        });\n\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n}",null,"import { AlchemyWebSocketProvider } from '../api/alchemy-websocket-provider';\nimport { fromHex, toHex } from '../api/util';\n\nexport interface BatchPart {\n  method: string;\n  params?: any;\n}\n\nexport interface NewHeadsEvent {\n  author: string;\n  difficulty: string;\n  extraData: string;\n  gasLimit: string;\n  gasUsed: string;\n  hash: string;\n  logsBloom: string;\n  miner: string;\n  mixHash: string;\n  nonce: string;\n  number: string;\n  parentHash: string;\n  receiptsRoot: string;\n  sealFields: string[];\n  sha3Uncles: string;\n  size: string;\n  stateRoot: string;\n  timestamp: string;\n  transactionsRoot: string;\n}\n\n/** The return type of eth_getBlocksByHash. */\nexport interface BlockHead extends NewHeadsEvent {\n  totalDifficulty: string;\n  transactions: any[];\n  uncles: string[];\n}\n\nexport interface LogsEvent {\n  address: string;\n  blockHash: string;\n  blockNumber: string;\n  data: string;\n  logIndex: string;\n  topics: string[];\n  transactionHash: string;\n  transactionIndex: string;\n  removed?: boolean;\n}\n\nexport interface LogsSubscriptionFilter {\n  address?: string | string[];\n  topics?: Array<string | string[] | null>;\n}\n\nexport interface GetLogsOptions extends LogsSubscriptionFilter {\n  fromBlock?: string;\n  toBlock?: string;\n}\n\ninterface CommonAncestor {\n  blockNumber: number;\n  logIndex: number;\n}\n\n/**\n * The maximum number of blocks to backfill. If more than this many blocks have\n * been missed, then we'll sadly miss data, but we want to make sure we don't\n * end up requesting thousands of blocks if somebody left their laptop closed for a week.\n */\nconst MAX_BACKFILL_BLOCKS = 120;\n\n/**\n * The WebsocketBackfiller fetches events that were sent since a provided block\n * number. This is used in the {@link AlchemyWebSocketProvider} to backfill\n * events that were transmitted while the websocket connection was down.\n *\n * The backfiller backfills two main eth_subscribe events: `logs` and `newHeads`.\n *\n * @internal\n */\nexport class WebsocketBackfiller {\n  // TODO: Use HTTP provider to do backfill.\n  private maxBackfillBlocks = MAX_BACKFILL_BLOCKS;\n  constructor(private readonly provider: AlchemyWebSocketProvider) {}\n\n  /**\n   * Runs backfill for `newHeads` events.\n   *\n   * @param isCancelled Whether the backfill request is cancelled.\n   * @param previousHeads Previous head requests that were sent.\n   * @param fromBlockNumber The block number to start backfilling from.\n   * @returns A list of `newHeads` events that were sent since the last backfill.\n   */\n  async getNewHeadsBackfill(\n    isCancelled: () => boolean,\n    previousHeads: NewHeadsEvent[],\n    fromBlockNumber: number\n  ): Promise<NewHeadsEvent[]> {\n    throwIfCancelled(isCancelled);\n    const toBlockNumber = await this.getBlockNumber();\n    throwIfCancelled(isCancelled);\n\n    // If there are no previous heads to fetch, return new heads since\n    // `fromBlockNumber`, or up to maxBackfillBlocks from the current head.\n    if (previousHeads.length === 0) {\n      return this.getHeadEventsInRange(\n        Math.max(fromBlockNumber, toBlockNumber - this.maxBackfillBlocks) + 1,\n        toBlockNumber + 1\n      );\n    }\n\n    // If the last emitted event is too far back in the past, there's no need\n    // to backfill for reorgs. Just fetch the last `maxBackfillBlocks` worth of\n    // new heads.\n    const lastSeenBlockNumber = fromHex(\n      previousHeads[previousHeads.length - 1].number\n    );\n    const minBlockNumber = toBlockNumber - this.maxBackfillBlocks + 1;\n    if (lastSeenBlockNumber <= minBlockNumber) {\n      return this.getHeadEventsInRange(minBlockNumber, toBlockNumber + 1);\n    }\n\n    // To capture all `newHeads` events, return all head events from the last\n    // seen block number to current + any of the previous heads that were re-orged.\n    const reorgHeads: NewHeadsEvent[] = await this.getReorgHeads(\n      isCancelled,\n      previousHeads\n    );\n    throwIfCancelled(isCancelled);\n    const intermediateHeads: NewHeadsEvent[] = await this.getHeadEventsInRange(\n      lastSeenBlockNumber + 1,\n      toBlockNumber + 1\n    );\n    throwIfCancelled(isCancelled);\n    return [...reorgHeads, ...intermediateHeads];\n  }\n\n  /**\n   * Runs backfill for `logs` events.\n   *\n   * @param isCancelled Whether the backfill request is cancelled.\n   * @param filter The filter object that accompanies a logs subscription.\n   * @param previousLogs Previous log requests that were sent.\n   * @param fromBlockNumber The block number to start backfilling from.\n   */\n  async getLogsBackfill(\n    isCancelled: () => boolean,\n    filter: LogsSubscriptionFilter,\n    previousLogs: LogsEvent[],\n    fromBlockNumber: number\n  ): Promise<LogsEvent[]> {\n    throwIfCancelled(isCancelled);\n    const toBlockNumber = await this.getBlockNumber();\n    throwIfCancelled(isCancelled);\n\n    // If there are no previous logs to fetch, return new logs since\n    // `fromBlockNumber`, or up to `maxBackfillBlocks` from the current head.\n    if (previousLogs.length === 0) {\n      return this.getLogsInRange(\n        filter,\n        Math.max(fromBlockNumber, toBlockNumber - this.maxBackfillBlocks) + 1,\n        toBlockNumber + 1\n      );\n    }\n\n    // If the last emitted log is too far back in the past, there's no need\n    // to backfill for removed logs. Just fetch the last `maxBackfillBlocks`\n    // worth of logs.\n    const lastSeenBlockNumber = fromHex(\n      previousLogs[previousLogs.length - 1].blockNumber\n    );\n    const minBlockNumber = toBlockNumber - this.maxBackfillBlocks + 1;\n    if (lastSeenBlockNumber < minBlockNumber) {\n      return this.getLogsInRange(filter, minBlockNumber, toBlockNumber + 1);\n    }\n\n    // Return all log events that have happened along with log events that have\n    // been removed due to a chain reorg.\n    const commonAncestor = await this.getCommonAncestor(\n      isCancelled,\n      previousLogs\n    );\n    throwIfCancelled(isCancelled);\n\n    // All previous logs with a block number greater than the common ancestor\n    // were part of a re-org, so mark them as such.\n    const removedLogs = previousLogs\n      .filter(log => fromHex(log.blockNumber) > commonAncestor.blockNumber)\n      .map(log => ({ ...log, removed: true }));\n\n    // If no common ancestor was found, start backfill from the oldest log's\n    // block number.\n    const fromBlockInclusive =\n      commonAncestor.blockNumber === Number.NEGATIVE_INFINITY\n        ? fromHex(previousLogs[0].blockNumber)\n        : commonAncestor.blockNumber;\n    let addedLogs = await this.getLogsInRange(\n      filter,\n      fromBlockInclusive,\n      toBlockNumber + 1\n    );\n\n    // De-dupe any logs that were already emitted.\n    addedLogs = addedLogs.filter(\n      log =>\n        log &&\n        (fromHex(log.blockNumber) > commonAncestor.blockNumber ||\n          fromHex(log.logIndex) > commonAncestor.logIndex)\n    );\n\n    throwIfCancelled(isCancelled);\n    return [...removedLogs, ...addedLogs];\n  }\n\n  /**\n   * Sets a new max backfill blocks. VISIBLE ONLY FOR TESTING.\n   *\n   * @internal\n   */\n  setMaxBackfillBlock(newMax: number): void {\n    this.maxBackfillBlocks = newMax;\n  }\n\n  /**\n   * Gets the current block number as a number.\n   *\n   * @private\n   */\n  private async getBlockNumber(): Promise<number> {\n    const blockNumberHex: string = await this.provider.send('eth_blockNumber');\n    return fromHex(blockNumberHex);\n  }\n\n  /**\n   * Gets all `newHead` events in the provided range. Note that the returned\n   * heads do not include re-orged heads. Use {@link getReorgHeads} to find heads\n   * that were part of a re-org.\n   *\n   * @private\n   */\n  private async getHeadEventsInRange(\n    fromBlockInclusive: number,\n    toBlockExclusive: number\n  ): Promise<NewHeadsEvent[]> {\n    if (fromBlockInclusive >= toBlockExclusive) {\n      return [];\n    }\n    const batchParts: BatchPart[] = [];\n    for (let i = fromBlockInclusive; i < toBlockExclusive; i++) {\n      batchParts.push({\n        method: 'eth_getBlockByNumber',\n        params: [toHex(i), false]\n      });\n    }\n\n    // TODO: handle errors\n    const blockHeads = await this.provider.sendBatch(batchParts);\n    return blockHeads.map(toNewHeadsEvent);\n  }\n\n  /**\n   * Returns all heads that were part of a reorg event.\n   *\n   * @private\n   */\n  private async getReorgHeads(\n    isCancelled: () => boolean,\n    previousHeads: NewHeadsEvent[]\n  ): Promise<NewHeadsEvent[]> {\n    const result: NewHeadsEvent[] = [];\n    // Iterate from the most recent head backwards in order to find the first\n    // block that was part of a re-org.\n    for (let i = previousHeads.length - 1; i >= 0; i--) {\n      const oldEvent = previousHeads[i];\n      const blockHead = await this.getBlockByNumber(fromHex(oldEvent.number));\n      throwIfCancelled(isCancelled);\n\n      // If the hashes match, then current head in the iteration was not re-orged.\n      if (oldEvent.hash === blockHead.hash) {\n        break;\n      }\n\n      result.push(toNewHeadsEvent(blockHead));\n    }\n    return result.reverse();\n  }\n\n  /**\n   * Simple wrapper around `eth_getBlockByNumber` that returns the complete\n   * block information for the provided block number.\n   *\n   * @private\n   */\n  private async getBlockByNumber(blockNumber: number): Promise<BlockHead> {\n    return this.provider.send('eth_getBlockByNumber', [\n      toHex(blockNumber),\n      false\n    ]);\n  }\n\n  /**\n   * Given a list of previous log events, finds the common block number from the\n   * logs that matches the block head.\n   *\n   * This can be used to identify which logs are part of a re-org.\n   *\n   * Returns 1 less than the oldest log's block number if no common ancestor was found.\n   *\n   * @private\n   */\n  private async getCommonAncestor(\n    isCancelled: () => boolean,\n    previousLogs: LogsEvent[]\n  ): Promise<CommonAncestor> {\n    // Iterate from the most recent head backwards in order to find the first\n    // block that was part of a re-org.\n    let blockHead = await this.getBlockByNumber(\n      fromHex(previousLogs[previousLogs.length - 1].blockNumber)\n    );\n    throwIfCancelled(isCancelled);\n    for (let i = previousLogs.length - 1; i >= 0; i--) {\n      const oldLog = previousLogs[i];\n\n      // Ensure that updated blocks are fetched every time the log's block number\n      // changes.\n      if (oldLog.blockNumber !== blockHead.number) {\n        blockHead = await this.getBlockByNumber(fromHex(oldLog.blockNumber));\n      }\n\n      // Since logs are ordered in ascending order, the first log that matches\n      // the hash should be the largest logIndex.\n      if (oldLog.blockHash === blockHead.hash) {\n        return {\n          blockNumber: fromHex(oldLog.blockNumber),\n          logIndex: fromHex(oldLog.logIndex)\n        };\n      }\n    }\n    return {\n      blockNumber: Number.NEGATIVE_INFINITY,\n      logIndex: Number.NEGATIVE_INFINITY\n    };\n  }\n\n  /**\n   * Gets all `logs` events in the provided range. Note that the returned logs\n   * do not include removed logs.\n   *\n   * @private\n   */ private async getLogsInRange(\n    filter: LogsSubscriptionFilter,\n    fromBlockInclusive: number,\n    toBlockExclusive: number\n  ): Promise<LogsEvent[]> {\n    if (fromBlockInclusive >= toBlockExclusive) {\n      return [];\n    }\n    const rangeFilter: GetLogsOptions = {\n      ...filter,\n      fromBlock: toHex(fromBlockInclusive),\n      toBlock: toHex(toBlockExclusive - 1)\n    };\n    return this.provider.send('eth_getLogs', [rangeFilter]);\n  }\n}\n\nfunction toNewHeadsEvent(head: BlockHead): NewHeadsEvent {\n  const result: NewHeadsEvent & Partial<BlockHead> = { ...head };\n  delete result.totalDifficulty;\n  delete result.transactions;\n  delete result.uncles;\n  return result;\n}\n\nexport function dedupeNewHeads(events: NewHeadsEvent[]): NewHeadsEvent[] {\n  return dedupe(events, event => event.hash);\n}\n\nexport function dedupeLogs(events: LogsEvent[]): LogsEvent[] {\n  return dedupe(events, event => `${event.blockHash}/${event.logIndex}`);\n}\n\nfunction dedupe<T>(items: T[], getKey: (item: T) => any): T[] {\n  const keysSeen: Set<any> = new Set();\n  const result: T[] = [];\n  items.forEach(item => {\n    const key = getKey(item);\n    if (!keysSeen.has(key)) {\n      keysSeen.add(key);\n      result.push(item);\n    }\n  });\n  return result;\n}\n\nconst CANCELLED = new Error('Cancelled');\nexport function throwIfCancelled(isCancelled: () => boolean): void {\n  if (isCancelled()) {\n    throw CANCELLED;\n  }\n}\n","import SturdyWebSocket from 'sturdy-websocket';\n\nimport { Listener } from '@ethersproject/abstract-provider';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport {\n  Networkish,\n  getNetwork as getNetworkFromEthers\n} from '@ethersproject/networks';\nimport { Network as NetworkFromEthers } from '@ethersproject/networks/lib/types';\nimport {\n  CommunityResourcable,\n  WebSocketProvider\n} from '@ethersproject/providers';\n\nimport {\n  EthersEvent,\n  getAlchemyEventTag,\n  isAlchemyEvent,\n  verifyAlchemyEventName\n} from '../internal/ethers-event';\nimport {\n  ALCHEMY_EVENT_TYPES,\n  ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE,\n  ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE,\n  JsonRpcRequest,\n  JsonRpcResponse,\n  SingleOrBatchResponse,\n  SubscriptionEvent,\n  WebSocketMessage\n} from '../internal/internal-types';\nimport {\n  BatchPart,\n  LogsEvent,\n  LogsSubscriptionFilter,\n  NewHeadsEvent,\n  WebsocketBackfiller,\n  dedupeLogs,\n  dedupeNewHeads,\n  throwIfCancelled\n} from '../internal/websocket-backfiller';\nimport { AlchemyEventType, AlchemySubscription } from '../types/types';\nimport {\n  CustomNetworks,\n  DEFAULT_ALCHEMY_API_KEY,\n  EthersNetwork,\n  noop\n} from '../util/const';\nimport { VERSION } from '../version';\nimport { AlchemyConfig } from './alchemy-config';\nimport { AlchemyProvider } from './alchemy-provider';\nimport { fromHex } from './util';\n\nconst HEARTBEAT_INTERVAL = 30000;\nconst HEARTBEAT_WAIT_TIME = 10000;\nconst BACKFILL_TIMEOUT = 60000;\nconst BACKFILL_RETRIES = 5;\n/**\n * Subscriptions have a memory of recent events they have sent so that in the\n * event that they disconnect and need to backfill, they can detect re-orgs.\n * Keep a buffer that goes back at least these many blocks, the maximum amount\n * at which we might conceivably see a re-org.\n *\n * Note that while our buffer goes back this many blocks, it may contain more\n * than this many elements, since in the case of logs subscriptions more than\n * one event may be emitted for a block.\n */\nconst RETAINED_EVENT_BLOCK_COUNT = 10;\n\n/**\n * SDK's custom implementation fo the ethers.js's 'AlchemyWebSocketProvider'.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link Alchemy} and call {@link Alchemy.config.getWebSocketProvider()}.\n *\n * @public\n */\nexport class AlchemyWebSocketProvider\n  extends WebSocketProvider\n  implements CommunityResourcable\n{\n  _events: Array<EthersEvent> = [];\n  readonly apiKey: string;\n\n  // In the case of a WebSocket reconnection, all subscriptions are lost and we\n  // create new ones to replace them, but we want to create the illusion that\n  // the original subscriptions persist. Thus, maintain a mapping from the\n  // \"virtual\" subscription ids which are visible to the consumer to the\n  // \"physical\" subscription ids of the actual connections. This terminology is\n  // borrowed from virtual and physical memory, which has a similar mapping.\n  /** @internal */\n  private readonly virtualSubscriptionsById: Map<string, VirtualSubscription> =\n    new Map();\n  /** @internal */\n  private readonly virtualIdsByPhysicalId: Map<string, string> = new Map();\n  /** @internal */\n  private readonly backfiller: WebsocketBackfiller;\n  /** @internal */\n  private heartbeatIntervalId?: NodeJS.Timeout;\n  /** @internal */\n  private cancelBackfill: () => void;\n\n  /** @internal */\n  constructor(config: AlchemyConfig, wsConstructor?: any) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'wss'\n    );\n\n    const protocol = `alchemy-sdk-${VERSION}`;\n\n    // Use the provided config URL override if it exists, otherwise use the created one.\n    const ws = new SturdyWebSocket(config.url ?? connection.url, protocol, {\n      wsConstructor: wsConstructor ?? getWebsocketConstructor()\n    });\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(ws as any, ethersNetwork);\n    this.apiKey = apiKey;\n\n    // Start heartbeat and backfiller for the websocket connection.\n    this.backfiller = new WebsocketBackfiller(this);\n    this.addSocketListeners();\n    this.startHeartbeat();\n    this.cancelBackfill = noop;\n  }\n\n  /**\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\n   *\n   * This override allows the SDK to set the provider's network to values not\n   * yet supported by ethers.js.\n   *\n   * @internal\n   * @override\n   */\n  static getNetwork(network: Networkish): NetworkFromEthers {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetworkFromEthers(network);\n  }\n\n  /**\n   * Overridden implementation of ethers that includes Alchemy based subscriptions.\n   *\n   * @param eventName Event to subscribe to\n   * @param listener The listener function to call when the event is triggered.\n   * @override\n   * @public\n   */\n  // TODO: Override `Listener` type to get type autocompletions.\n  on(eventName: AlchemyEventType, listener: Listener): this {\n    return this._addEventListener(eventName, listener, false);\n  }\n\n  /**\n   * Overridden implementation of ethers that includes Alchemy based\n   * subscriptions. Adds a listener to the triggered for only the next\n   * {@link eventName} event, after which it will be removed.\n   *\n   * @param eventName Event to subscribe to\n   * @param listener The listener function to call when the event is triggered.\n   * @override\n   * @public\n   */\n  // TODO: Override `Listener` type to get type autocompletions.\n  once(eventName: AlchemyEventType, listener: Listener): this {\n    return this._addEventListener(eventName, listener, true);\n  }\n\n  /**\n   * Removes the provided {@link listener} for the {@link eventName} event. If no\n   * listener is provided, all listeners for the event will be removed.\n   *\n   * @param eventName Event to unlisten to.\n   * @param listener The listener function to remove.\n   * @override\n   * @public\n   */\n  off(eventName: AlchemyEventType, listener?: Listener): this {\n    if (isAlchemyEvent(eventName)) {\n      return this._off(eventName, listener);\n    } else {\n      return super.off(eventName, listener);\n    }\n  }\n\n  /**\n   * Remove all listeners for the provided {@link eventName} event. If no event\n   * is provided, all events and their listeners are removed.\n   *\n   * @param eventName The event to remove all listeners for.\n   * @override\n   * @public\n   */\n  removeAllListeners(eventName?: AlchemyEventType): this {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._removeAllListeners(eventName);\n    } else {\n      return super.removeAllListeners(eventName);\n    }\n  }\n\n  /**\n   * Returns the number of listeners for the provided {@link eventName} event. If\n   * no event is provided, the total number of listeners for all events is returned.\n   *\n   * @param eventName The event to get the number of listeners for.\n   * @public\n   * @override\n   */\n  listenerCount(eventName?: AlchemyEventType): number {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._listenerCount(eventName);\n    } else {\n      return super.listenerCount(eventName);\n    }\n  }\n\n  /**\n   * Returns an array of listeners for the provided {@link eventName} event. If\n   * no event is provided, all listeners will be included.\n   *\n   * @param eventName The event to get the listeners for.\n   * @public\n   * @override\n   */\n  listeners(eventName?: AlchemyEventType): Array<Listener> {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._listeners(eventName);\n    } else {\n      return super.listeners(eventName);\n    }\n  }\n\n  /**\n   * Overrides the method in `BaseProvider` in order to properly format the\n   * Alchemy subscription events.\n   *\n   * @internal\n   * @override\n   */\n  _addEventListener(\n    eventName: AlchemyEventType,\n    listener: Listener,\n    once: boolean\n  ): this {\n    if (isAlchemyEvent(eventName)) {\n      verifyAlchemyEventName(eventName);\n      const event = new EthersEvent(\n        getAlchemyEventTag(eventName),\n        listener,\n        once\n      );\n      this._events.push(event);\n      this._startEvent(event);\n      return this;\n    } else {\n      return super._addEventListener(eventName, listener, once);\n    }\n  }\n\n  /**\n   * Overrides the `_startEvent()` method in ethers.js's\n   * {@link WebSocketProvider} to include additional alchemy methods.\n   *\n   * @param event\n   * @override\n   * @internal\n   */\n  _startEvent(event: EthersEvent): void {\n    // Check if the event type is a custom Alchemy subscription.\n    const customLogicTypes = [...ALCHEMY_EVENT_TYPES, 'block', 'filter'];\n    if (customLogicTypes.includes(event.type)) {\n      this.customStartEvent(event);\n    } else {\n      super._startEvent(event);\n    }\n  }\n\n  /**\n   * Overridden from ethers.js's {@link WebSocketProvider}\n   *\n   * Modified in order to add mappings for backfilling.\n   *\n   * @internal\n   * @override\n   */\n  async _subscribe(\n    tag: string,\n    param: Array<any>,\n    processFunc: (result: any) => void,\n    event?: EthersEvent\n  ): Promise<void> {\n    let subIdPromise = this._subIds[tag];\n\n    // BEGIN MODIFIED CODE\n    const startingBlockNumber = await this.getBlockNumber();\n    // END MODIFIED CODE\n\n    if (subIdPromise == null) {\n      subIdPromise = Promise.all(param).then(param => {\n        return this.send('eth_subscribe', param);\n      });\n      this._subIds[tag] = subIdPromise;\n    }\n    const subId = await subIdPromise;\n\n    // BEGIN MODIFIED CODE\n    const resolvedParams = await Promise.all(param);\n    this.virtualSubscriptionsById.set(subId, {\n      event: event!,\n      method: 'eth_subscribe',\n      params: resolvedParams,\n      startingBlockNumber,\n      virtualId: subId,\n      physicalId: subId,\n      sentEvents: [],\n      isBackfilling: false,\n      backfillBuffer: []\n    });\n    this.virtualIdsByPhysicalId.set(subId, subId);\n\n    // END MODIFIED CODE\n\n    this._subs[subId] = { tag, processFunc };\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @internal\n   * @override\n   */\n  emit(eventName: AlchemyEventType, ...args: Array<any>): boolean {\n    if (isAlchemyEvent(eventName)) {\n      let result = false;\n\n      const stopped: Array<EthersEvent> = [];\n\n      // This line is the only modified line from the original method.\n      const eventTag = getAlchemyEventTag(eventName);\n\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n\n        setTimeout(() => {\n          event.listener.apply(this, args);\n        }, 0);\n\n        result = true;\n\n        if (event.once) {\n          stopped.push(event);\n          return false;\n        }\n\n        return true;\n      });\n\n      stopped.forEach(event => {\n        this._stopEvent(event);\n      });\n\n      return result;\n    } else {\n      return super.emit(eventName, ...args);\n    }\n  }\n\n  /** @internal */\n  async sendBatch(parts: BatchPart[]): Promise<any[]> {\n    let nextId = 0;\n    const payload: JsonRpcRequest[] = parts.map(({ method, params }) => {\n      return {\n        method,\n        params,\n        jsonrpc: '2.0',\n        id: `alchemy-sdk:${nextId++}`\n      };\n    });\n\n    return this.sendBatchConcurrently(payload);\n  }\n\n  /** @override */\n  destroy(): Promise<void> {\n    this.removeSocketListeners();\n    this.stopHeartbeatAndBackfill();\n    return super.destroy();\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `WebSocketProvider._stopEvent()`.\n   *\n   * This method is copied over directly in order to support Alchemy's\n   * subscription type by allowing the provider to properly stop Alchemy's\n   * subscription events.\n   *\n   * @internal\n   */\n  _stopEvent(event: EthersEvent): void {\n    let tag = event.tag;\n\n    // START MODIFIED CODE\n    if (ALCHEMY_EVENT_TYPES.includes(event.type)) {\n      // There are remaining pending transaction listeners.\n      if (\n        this._events.filter(e => ALCHEMY_EVENT_TYPES.includes(e.type)).length\n      ) {\n        return;\n      }\n      // END MODIFIED CODE\n    } else if (event.type === 'tx') {\n      // There are remaining transaction event listeners\n      if (this._events.filter(e => e.type === 'tx').length) {\n        return;\n      }\n      tag = 'tx';\n    } else if (this.listenerCount(event.event)) {\n      // There are remaining event listeners\n      return;\n    }\n\n    const subId = this._subIds[tag];\n    if (!subId) {\n      return;\n    }\n\n    delete this._subIds[tag];\n    void subId.then(subId => {\n      if (!this._subs[subId]) {\n        return;\n      }\n      delete this._subs[subId];\n      void this.send('eth_unsubscribe', [subId]);\n    });\n  }\n\n  /** @internal */\n  private addSocketListeners(): void {\n    this._websocket.addEventListener('message', this.handleMessage);\n    this._websocket.addEventListener('reopen', this.handleReopen);\n    this._websocket.addEventListener('down', this.stopHeartbeatAndBackfill);\n  }\n\n  /** @internal */\n  private removeSocketListeners(): void {\n    this._websocket.removeEventListener('message', this.handleMessage);\n    this._websocket.removeEventListener('reopen', this.handleReopen);\n    this._websocket.removeEventListener('down', this.stopHeartbeatAndBackfill);\n  }\n\n  /**\n   * The underlying ethers {@link WebSocketProvider} already handles and emits\n   * messages. To allow backfilling, track all messages that are emitted.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private handleMessage = (event: MessageEvent): void => {\n    const message: WebSocketMessage = JSON.parse(event.data);\n    if (!isSubscriptionEvent(message)) {\n      return;\n    }\n    const physicalId = message.params.subscription;\n    const virtualId = this.virtualIdsByPhysicalId.get(physicalId);\n    if (!virtualId) {\n      return;\n    }\n    const subscription = this.virtualSubscriptionsById.get(virtualId)!;\n    if (subscription.method !== 'eth_subscribe') {\n      return;\n    }\n\n    switch (subscription.params[0]) {\n      case 'newHeads': {\n        const newHeadsSubscription = subscription as NewHeadsSubscription;\n        const newHeadsMessage = message as SubscriptionEvent<NewHeadsEvent>;\n        const { isBackfilling, backfillBuffer } = newHeadsSubscription;\n        const { result } = newHeadsMessage.params;\n        if (isBackfilling) {\n          addToNewHeadsEventsBuffer(backfillBuffer, result);\n        } else if (physicalId !== virtualId) {\n          // In the case of a re-opened subscription, ethers will not emit the\n          // event, so the SDK has to.\n          this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n        } else {\n          // Ethers subscription mapping will emit the event, just store it.\n          this.rememberEvent(virtualId, result, getNewHeadsBlockNumber);\n        }\n        break;\n      }\n      case 'logs': {\n        const logsSubscription = subscription as LogsSubscription;\n        const logsMessage = message as SubscriptionEvent<LogsEvent>;\n        const { isBackfilling, backfillBuffer } = logsSubscription;\n        const { result } = logsMessage.params;\n        if (isBackfilling) {\n          addToLogsEventsBuffer(backfillBuffer, result);\n        } else if (virtualId !== physicalId) {\n          this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n        } else {\n          this.rememberEvent(virtualId, result, getLogsBlockNumber);\n        }\n        break;\n      }\n      default:\n        if (physicalId !== virtualId) {\n          // In the case of a re-opened subscription, ethers will not emit the\n          // event, so the SDK has to.\n          const { result } = (message as SubscriptionEvent<unknown>).params;\n          this.emitEvent(virtualId, result);\n        }\n    }\n  };\n\n  /**\n   * When the websocket connection reopens:\n   *\n   * 1. Resubscribe to all existing subscriptions and start backfilling\n   * 2. Restart heart beat.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private handleReopen = () => {\n    this.virtualIdsByPhysicalId.clear();\n    const { cancel, isCancelled } = makeCancelToken();\n    this.cancelBackfill = cancel;\n    for (const subscription of this.virtualSubscriptionsById.values()) {\n      void (async () => {\n        try {\n          await this.resubscribeAndBackfill(isCancelled, subscription);\n        } catch (error) {\n          if (!isCancelled()) {\n            console.error(\n              `Error while backfilling \"${subscription.params[0]}\" subscription. Some events may be missing.`,\n              error\n            );\n          }\n        }\n      })();\n    }\n    this.startHeartbeat();\n  };\n\n  /**\n   * Reopens the backfill based on\n   *\n   * @param isCancelled\n   * @param subscription\n   * @internal\n   */\n  private async resubscribeAndBackfill(\n    isCancelled: () => boolean,\n    subscription: VirtualSubscription\n  ): Promise<void> {\n    const {\n      virtualId,\n      method,\n      params,\n      sentEvents,\n      backfillBuffer,\n      startingBlockNumber\n    } = subscription;\n    subscription.isBackfilling = true;\n    backfillBuffer.length = 0;\n    try {\n      const physicalId = await this.send(method, params);\n      throwIfCancelled(isCancelled);\n      subscription.physicalId = physicalId;\n      this.virtualIdsByPhysicalId.set(physicalId, virtualId);\n      switch (params[0]) {\n        case 'newHeads': {\n          const backfillEvents = await withBackoffRetries(\n            () =>\n              withTimeout(\n                this.backfiller.getNewHeadsBackfill(\n                  isCancelled,\n                  sentEvents,\n                  startingBlockNumber\n                ),\n                BACKFILL_TIMEOUT\n              ),\n            BACKFILL_RETRIES,\n            () => !isCancelled()\n          );\n          throwIfCancelled(isCancelled);\n          const events = dedupeNewHeads([...backfillEvents, ...backfillBuffer]);\n          events.forEach(event => this.emitNewHeadsEvent(virtualId, event));\n          break;\n        }\n        case 'logs': {\n          const filter: LogsSubscriptionFilter = params[1] || {};\n          const backfillEvents = await withBackoffRetries(\n            () =>\n              withTimeout(\n                this.backfiller.getLogsBackfill(\n                  isCancelled,\n                  filter,\n                  sentEvents,\n                  startingBlockNumber\n                ),\n                BACKFILL_TIMEOUT\n              ),\n            BACKFILL_RETRIES,\n            () => !isCancelled()\n          );\n          throwIfCancelled(isCancelled);\n          const events = dedupeLogs([...backfillEvents, ...backfillBuffer]);\n          events.forEach(event => this.emitLogsEvent(virtualId, event));\n          break;\n        }\n        default:\n          break;\n      }\n    } finally {\n      subscription.isBackfilling = false;\n      backfillBuffer.length = 0;\n    }\n  }\n\n  /**\n   * Cancels the heartbeat and any pending backfills being performed. This is\n   * called when the websocket connection goes down or is disconnected.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private stopHeartbeatAndBackfill = () => {\n    if (this.heartbeatIntervalId != null) {\n      clearInterval(this.heartbeatIntervalId);\n      this.heartbeatIntervalId = undefined;\n    }\n    this.cancelBackfill();\n  };\n\n  /** @internal */\n  private emitNewHeadsEvent(virtualId: string, result: NewHeadsEvent): void {\n    this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n  }\n\n  /** @internal */\n  private emitLogsEvent(virtualId: string, result: LogsEvent): void {\n    this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n  }\n\n  /**\n   * Emits an event to consumers, but also remembers it in its subscriptions's\n   * `sentEvents` buffer so that we can detect re-orgs if the connection drops\n   * and needs to be reconnected.\n   *\n   * @internal\n   */\n  private emitAndRememberEvent<T>(\n    virtualId: string,\n    result: T,\n    getBlockNumber: (result: T) => number\n  ): void {\n    this.rememberEvent(virtualId, result, getBlockNumber);\n    this.emitEvent(virtualId, result);\n  }\n\n  private emitEvent<T>(virtualId: string, result: T): void {\n    const subscription = this.virtualSubscriptionsById.get(virtualId);\n    if (!subscription) {\n      return;\n    }\n    this.emitGenericEvent(subscription, result);\n  }\n\n  /** @internal */\n  private rememberEvent<T>(\n    virtualId: string,\n    result: T,\n    getBlockNumber: (result: T) => number\n  ): void {\n    const subscription = this.virtualSubscriptionsById.get(virtualId);\n    if (!subscription) {\n      return;\n    }\n    // Web3 modifies these event objects once we pass them on (changing hex\n    // numbers to numbers). We want the original event, so make a defensive\n    // copy.\n    addToPastEventsBuffer(\n      subscription.sentEvents,\n      { ...result },\n      getBlockNumber\n    );\n  }\n\n  /** @internal */\n  private emitGenericEvent(\n    subscription: VirtualSubscription,\n    result: any\n  ): void {\n    const emitFunction = this.emitProcessFn(subscription.event);\n    emitFunction(result);\n  }\n\n  /**\n   * Starts a heartbeat that pings the websocket server periodically to ensure\n   * that the connection stays open.\n   *\n   * @internal\n   */\n  private startHeartbeat(): void {\n    if (this.heartbeatIntervalId != null) {\n      return;\n    }\n    this.heartbeatIntervalId = setInterval(async () => {\n      try {\n        await withTimeout(this.send('net_version'), HEARTBEAT_WAIT_TIME);\n      } catch {\n        this._websocket.reconnect();\n      }\n    }, HEARTBEAT_INTERVAL);\n  }\n\n  /**\n   * This method sends the batch concurrently as individual requests rather than\n   * as a batch, which was the original implementation. The original batch logic\n   * is preserved in this implementation in order for faster porting.\n   *\n   * @param payload\n   * @internal\n   */\n  // TODO(cleanup): Refactor and remove usages of `sendBatch()`.\n  // TODO(errors): Use allSettled() once we have more error handling.\n  private async sendBatchConcurrently(\n    payload: JsonRpcRequest[]\n  ): Promise<unknown[]> {\n    return Promise.all(payload.map(req => this.send(req.method, req.params)));\n  }\n\n  /** @internal */\n  private customStartEvent(event: EthersEvent): void {\n    if (event.type === ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {\n      const { fromAddress, toAddress, hashesOnly } = event;\n      void this._subscribe(\n        event.tag,\n        [\n          AlchemySubscription.PENDING_TRANSACTIONS,\n          { fromAddress, toAddress, hashesOnly }\n        ],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE) {\n      const { addresses, includeRemoved, hashesOnly } = event;\n      void this._subscribe(\n        event.tag,\n        [\n          AlchemySubscription.MINED_TRANSACTIONS,\n          { addresses, includeRemoved, hashesOnly }\n        ],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === 'block') {\n      void this._subscribe(\n        'block',\n        ['newHeads'],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === 'filter') {\n      void this._subscribe(\n        event.tag,\n        ['logs', this._getFilter(event.filter)],\n        this.emitProcessFn(event),\n        event\n      );\n    }\n  }\n\n  /** @internal */\n  private emitProcessFn(event: EthersEvent): (result: any) => void {\n    switch (event.type) {\n      case ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE:\n        return result =>\n          this.emit(\n            {\n              method: AlchemySubscription.PENDING_TRANSACTIONS,\n              fromAddress: event.fromAddress,\n              toAddress: event.toAddress,\n              hashesOnly: event.hashesOnly\n            },\n            result\n          );\n      case ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE:\n        return result =>\n          this.emit(\n            {\n              method: AlchemySubscription.MINED_TRANSACTIONS,\n              addresses: event.addresses,\n              includeRemoved: event.includeRemoved,\n              hashesOnly: event.hashesOnly\n            },\n            result\n          );\n      case 'block':\n        return result => {\n          const blockNumber = BigNumber.from(result.number).toNumber();\n          this._emitted.block = blockNumber;\n          this.emit('block', blockNumber);\n        };\n      case 'filter':\n        return result => {\n          if (result.removed == null) {\n            result.removed = false;\n          }\n          this.emit(event.filter, this.formatter.filterLog(result));\n        };\n      default:\n        throw new Error('Invalid event type to `emitProcessFn()`');\n    }\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.off()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _off(eventName: AlchemyEventType, listener?: Listener): this {\n    if (listener == null) {\n      return this.removeAllListeners(eventName);\n    }\n\n    const stopped: Array<EthersEvent> = [];\n\n    let found = false;\n    const eventTag = getAlchemyEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag || event.listener != listener) {\n        return true;\n      }\n      if (found) {\n        return true;\n      }\n      found = true;\n      stopped.push(event);\n      return false;\n    });\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n\n    return this;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.removeAllListeners()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _removeAllListeners(eventName: AlchemyEventType): this {\n    let stopped: Array<EthersEvent> = [];\n    if (eventName == null) {\n      stopped = this._events;\n\n      this._events = [];\n    } else {\n      const eventTag = getAlchemyEventTag(eventName);\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n        stopped.push(event);\n        return false;\n      });\n    }\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n\n    return this;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.listenerCount()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _listenerCount(eventName?: AlchemyEventType): number {\n    if (!eventName) {\n      return this._events.length;\n    }\n\n    const eventTag = getAlchemyEventTag(eventName);\n    return this._events.filter(event => {\n      return event.tag === eventTag;\n    }).length;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.listeners()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _listeners(eventName?: AlchemyEventType): Array<Listener> {\n    if (eventName == null) {\n      return this._events.map(event => event.listener);\n    }\n\n    const eventTag = getAlchemyEventTag(eventName);\n    return this._events\n      .filter(event => event.tag === eventTag)\n      .map(event => event.listener);\n  }\n}\n\nfunction getWebsocketConstructor(): any {\n  return isNodeEnvironment() ? require('websocket').w3cwebsocket : WebSocket;\n}\n\nfunction isNodeEnvironment(): boolean {\n  return (\n    typeof process !== 'undefined' &&\n    process != null &&\n    process.versions != null &&\n    process.versions.node != null\n  );\n}\n\n/** @internal */\ninterface CancelToken {\n  cancel(): void;\n  isCancelled(): boolean;\n}\n\ninterface VirtualSubscription {\n  event: EthersEvent;\n  virtualId: string;\n  physicalId: string;\n  method: string;\n  params: any[];\n  isBackfilling: boolean;\n  startingBlockNumber: number;\n  sentEvents: any[];\n  backfillBuffer: any[];\n}\n\ninterface NewHeadsSubscription extends VirtualSubscription {\n  method: 'eth_subscribe';\n  params: ['newHeads'];\n  isBackfilling: boolean;\n  sentEvents: NewHeadsEvent[];\n  backfillBuffer: NewHeadsEvent[];\n}\n\ninterface LogsSubscription extends VirtualSubscription {\n  method: 'eth_subscribe';\n  params: ['logs', LogsSubscriptionFilter?];\n  isBackfilling: boolean;\n  sentEvents: LogsEvent[];\n  backfillBuffer: LogsEvent[];\n}\n\n// TODO(cleanup): Use class variable rather than passing `isCancelled` everywhere.\nfunction makeCancelToken(): CancelToken {\n  let cancelled = false;\n  return { cancel: () => (cancelled = true), isCancelled: () => cancelled };\n}\n\n// TODO(cleanup): replace with SDK's backoff implementation\nconst MIN_RETRY_DELAY = 1000;\nconst RETRY_BACKOFF_FACTOR = 2;\nconst MAX_RETRY_DELAY = 30000;\n\nasync function withBackoffRetries<T>(\n  f: () => Promise<T>,\n  retryCount: number,\n  shouldRetry: (error: unknown) => boolean = () => true\n): Promise<T> {\n  let nextWaitTime = 0;\n  let i = 0;\n  while (true) {\n    try {\n      return await f();\n    } catch (error) {\n      i++;\n      if (i >= retryCount || !shouldRetry(error)) {\n        throw error;\n      }\n      await delay(nextWaitTime);\n      if (!shouldRetry(error)) {\n        throw error;\n      }\n      nextWaitTime =\n        nextWaitTime === 0\n          ? MIN_RETRY_DELAY\n          : Math.min(MAX_RETRY_DELAY, RETRY_BACKOFF_FACTOR * nextWaitTime);\n    }\n  }\n}\n\nfunction delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction withTimeout<T>(promise: Promise<T>, ms: number): Promise<T> {\n  return Promise.race([\n    promise,\n    new Promise<T>((_, reject) =>\n      setTimeout(() => reject(new Error('Timeout')), ms)\n    )\n  ]);\n}\n\nfunction getNewHeadsBlockNumber(event: NewHeadsEvent): number {\n  return fromHex(event.number);\n}\n\nfunction getLogsBlockNumber(event: LogsEvent): number {\n  return fromHex(event.blockNumber);\n}\n\nfunction isResponse(\n  message: WebSocketMessage\n): message is SingleOrBatchResponse {\n  return (\n    Array.isArray(message) ||\n    (message.jsonrpc === '2.0' && (message as JsonRpcResponse).id !== undefined)\n  );\n}\n\nfunction isSubscriptionEvent(\n  message: WebSocketMessage\n): message is SubscriptionEvent {\n  return !isResponse(message);\n}\n\nfunction addToNewHeadsEventsBuffer(\n  pastEvents: NewHeadsEvent[],\n  event: NewHeadsEvent\n): void {\n  addToPastEventsBuffer(pastEvents, event, getNewHeadsBlockNumber);\n}\n\nfunction addToLogsEventsBuffer(\n  pastEvents: LogsEvent[],\n  event: LogsEvent\n): void {\n  addToPastEventsBuffer(pastEvents, event, getLogsBlockNumber);\n}\n\n/**\n * Adds a new event to an array of events, evicting any events which are so old\n * that they will no longer feasibly be part of a reorg.\n */\nfunction addToPastEventsBuffer<T>(\n  pastEvents: T[],\n  event: T,\n  getBlockNumber: (event: T) => number\n): void {\n  const currentBlockNumber = getBlockNumber(event);\n  // Find first index of an event recent enough to retain, then drop everything\n  // at a lower index.\n  const firstGoodIndex = pastEvents.findIndex(\n    e => getBlockNumber(e) > currentBlockNumber - RETAINED_EVENT_BLOCK_COUNT\n  );\n  if (firstGoodIndex === -1) {\n    pastEvents.length = 0;\n  } else {\n    pastEvents.splice(0, firstGoodIndex);\n  }\n  pastEvents.push(event);\n}\n",null,"export interface Options {\n    allClearResetTime?: number;\n    connectTimeout?: number;\n    debug?: boolean;\n    minReconnectDelay?: number;\n    maxReconnectDelay?: number;\n    maxReconnectAttempts?: number;\n    reconnectBackoffFactor?: number;\n    wsConstructor?: new (url: string, protocols?: string | string[]) => any;\n    shouldReconnect?(closeEvent: CloseEvent): boolean | Promise<boolean>;\n}\n\ninterface SturdyWebSocketEventMap extends WebSocketEventMap {\n    down: CloseEvent;\n    reopen: Event;\n}\n\ntype WebSocketListener<K extends keyof SturdyWebSocketEventMap> = (\n    this: WebSocket,\n    event: SturdyWebSocketEventMap[K],\n) => any;\n\ntype WebSocketListeners = {\n    [K in keyof SturdyWebSocketEventMap]?: Array<WebSocketListener<K>>;\n} & {\n    [key: string]: EventListenerOrEventListenerObject[];\n};\n\nconst SHOULD_RECONNECT_FALSE_MESSAGE =\n    \"Provided shouldReconnect() returned false. Closing permanently.\";\nconst SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE =\n    \"Provided shouldReconnect() resolved to false. Closing permanently.\";\n\nexport default class SturdyWebSocket implements WebSocket {\n    public static readonly DEFAULT_OPTIONS: Required<Options> = {\n        allClearResetTime: 5000,\n        connectTimeout: 5000,\n        debug: false,\n        minReconnectDelay: 1000,\n        maxReconnectDelay: 30000,\n        maxReconnectAttempts: Number.POSITIVE_INFINITY,\n        reconnectBackoffFactor: 1.5,\n        shouldReconnect: () => true,\n        wsConstructor: undefined!,\n    };\n\n    public static readonly CONNECTING = 0;\n    public static readonly OPEN = 1;\n    public static readonly CLOSING = 2;\n    public static readonly CLOSED = 3;\n\n    public onclose: ((event: CloseEvent) => void) | null = null;\n    public onerror: ((event: Event) => void) | null = null;\n    public onmessage: ((event: MessageEvent) => void) | null = null;\n    public onopen: ((event: Event) => void) | null = null;\n    public ondown: ((event: CloseEvent | undefined) => void) | null = null;\n    public onreopen: ((event: Event) => void) | null = null;\n    public readonly CONNECTING = SturdyWebSocket.CONNECTING;\n    public readonly OPEN = SturdyWebSocket.OPEN;\n    public readonly CLOSING = SturdyWebSocket.CLOSING;\n    public readonly CLOSED = SturdyWebSocket.CLOSED;\n\n    private readonly protocols?: string | string[];\n    private readonly options: Required<Options>;\n    private ws?: WebSocket;\n    private hasBeenOpened = false;\n    private isClosed = false;\n    private messageBuffer: any[] = [];\n    private nextRetryTime: number = 0;\n    private reconnectCount = 0;\n    private allClearTimeoutId?: any;\n    private connectTimeoutId?: any;\n    private binaryTypeInternal?: BinaryType;\n    private lastKnownExtensions = \"\";\n    private lastKnownProtocol = \"\";\n    private readonly listeners: WebSocketListeners = {};\n\n    constructor(url: string, options?: Options);\n    constructor(\n        url: string,\n        protocols: string | string[] | undefined,\n        options?: Options,\n    );\n    constructor(\n        public readonly url: string,\n        protocolsOrOptions?: string | string[] | Options,\n        options: Options = {},\n    ) {\n        if (\n            protocolsOrOptions == null ||\n            typeof protocolsOrOptions === \"string\" ||\n            Array.isArray(protocolsOrOptions)\n        ) {\n            this.protocols = protocolsOrOptions;\n        } else {\n            options = protocolsOrOptions;\n        }\n        this.options = applyDefaultOptions(options);\n        if (!this.options.wsConstructor) {\n            if (typeof WebSocket !== \"undefined\") {\n                this.options.wsConstructor = WebSocket;\n            } else {\n                throw new Error(\n                    \"WebSocket not present in global scope and no \" +\n                        \"wsConstructor option was provided.\",\n                );\n            }\n        }\n        this.openNewWebSocket();\n    }\n\n    public get binaryType(): BinaryType {\n        return this.binaryTypeInternal || \"blob\";\n    }\n\n    public set binaryType(binaryType: BinaryType) {\n        this.binaryTypeInternal = binaryType;\n        if (this.ws) {\n            this.ws.binaryType = binaryType;\n        }\n    }\n\n    public get bufferedAmount(): number {\n        let sum = this.ws ? this.ws.bufferedAmount : 0;\n        let hasUnknownAmount = false;\n        this.messageBuffer.forEach(data => {\n            const byteLength = getDataByteLength(data);\n            if (byteLength != null) {\n                sum += byteLength;\n            } else {\n                hasUnknownAmount = true;\n            }\n        });\n        if (hasUnknownAmount) {\n            this.debugLog(\n                \"Some buffered data had unknown length. bufferedAmount()\" +\n                    \" return value may be below the correct amount.\",\n            );\n        }\n        return sum;\n    }\n\n    public get extensions(): string {\n        return this.ws ? this.ws.extensions : this.lastKnownExtensions;\n    }\n\n    public get protocol(): string {\n        return this.ws ? this.ws.protocol : this.lastKnownProtocol;\n    }\n\n    public get readyState(): number {\n        return this.isClosed ? SturdyWebSocket.CLOSED : SturdyWebSocket.OPEN;\n    }\n\n    public close(code?: number, reason?: string): void {\n        this.disposeSocket(code, reason);\n        this.shutdown();\n        this.debugLog(\"WebSocket permanently closed by client.\");\n    }\n\n    public send(data: any): void {\n        if (this.isClosed) {\n            throw new Error(\"WebSocket is already in CLOSING or CLOSED state.\");\n        } else if (this.ws && this.ws.readyState === this.OPEN) {\n            this.ws.send(data);\n        } else {\n            this.messageBuffer.push(data);\n        }\n    }\n\n    public reconnect(): void {\n        if (this.isClosed) {\n            throw new Error(\n                \"Cannot call reconnect() on socket which is permanently closed.\",\n            );\n        }\n        this.disposeSocket(1000, \"Client requested reconnect.\");\n        this.handleClose(undefined);\n    }\n\n    public addEventListener<K extends keyof SturdyWebSocketEventMap>(\n        type: K,\n        listener: (this: WebSocket, event: SturdyWebSocketEventMap[K]) => void,\n    ): void;\n    public addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void;\n    public addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void {\n        if (!this.listeners[type]) {\n            this.listeners[type] = [];\n        }\n        this.listeners[type].push(listener);\n    }\n\n    public dispatchEvent(event: Event): boolean {\n        return this.dispatchEventOfType(event.type, event);\n    }\n\n    public removeEventListener<K extends keyof SturdyWebSocketEventMap>(\n        type: K,\n        listener: (this: WebSocket, event: SturdyWebSocketEventMap[K]) => void,\n    ): void;\n    public removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void;\n    public removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void {\n        if (this.listeners[type]) {\n            this.listeners[type] = this.listeners[type].filter(\n                l => l !== listener,\n            );\n        }\n    }\n\n    private openNewWebSocket(): void {\n        if (this.isClosed) {\n            return;\n        }\n        const { connectTimeout, wsConstructor } = this.options;\n        this.debugLog(`Opening new WebSocket to ${this.url}.`);\n        const ws: WebSocket = new wsConstructor(this.url, this.protocols);\n        ws.onclose = event => this.handleClose(event);\n        ws.onerror = event => this.handleError(event);\n        ws.onmessage = event => this.handleMessage(event);\n        ws.onopen = event => this.handleOpen(event);\n        this.connectTimeoutId = setTimeout(() => {\n            // If this is running, we still haven't opened the websocket.\n            // Kill it so we can try again.\n            this.clearConnectTimeout();\n            this.disposeSocket();\n            this.handleClose(undefined);\n        }, connectTimeout);\n        this.ws = ws;\n    }\n\n    private handleOpen(event: Event): void {\n        if (!this.ws || this.isClosed) {\n            return;\n        }\n        const { allClearResetTime } = this.options;\n        this.debugLog(\"WebSocket opened.\");\n        if (this.binaryTypeInternal != null) {\n            this.ws.binaryType = this.binaryTypeInternal;\n        } else {\n            this.binaryTypeInternal = this.ws.binaryType;\n        }\n        this.clearConnectTimeout();\n        if (this.hasBeenOpened) {\n            this.dispatchEventOfType(\"reopen\", event);\n        } else {\n            this.dispatchEventOfType(\"open\", event);\n            this.hasBeenOpened = true;\n        }\n        this.messageBuffer.forEach(message => this.send(message));\n        this.messageBuffer = [];\n        this.allClearTimeoutId = setTimeout(() => {\n            this.clearAllClearTimeout();\n            this.nextRetryTime = 0;\n            this.reconnectCount = 0;\n            const openTime = (allClearResetTime / 1000) | 0;\n            this.debugLog(\n                `WebSocket remained open for ${openTime} seconds. Resetting` +\n                    \" retry time and count.\",\n            );\n        }, allClearResetTime);\n    }\n\n    private handleMessage(event: MessageEvent): void {\n        if (this.isClosed) {\n            return;\n        }\n        this.dispatchEventOfType(\"message\", event);\n    }\n\n    private handleClose(event: CloseEvent | undefined): void {\n        if (this.isClosed) {\n            return;\n        }\n        const { maxReconnectAttempts, shouldReconnect } = this.options;\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n        if (this.ws) {\n            this.lastKnownExtensions = this.ws.extensions;\n            this.lastKnownProtocol = this.ws.protocol;\n            this.disposeSocket();\n        }\n        this.dispatchEventOfType(\"down\", event);\n        if (this.reconnectCount >= maxReconnectAttempts) {\n            this.stopReconnecting(\n                event,\n                this.getTooManyFailedReconnectsMessage(),\n            );\n            return;\n        }\n        const willReconnect = !event || shouldReconnect(event);\n        if (typeof willReconnect === \"boolean\") {\n            this.handleWillReconnect(\n                willReconnect,\n                event,\n                SHOULD_RECONNECT_FALSE_MESSAGE,\n            );\n        } else {\n            willReconnect.then(willReconnectResolved => {\n                if (this.isClosed) {\n                    return;\n                }\n                this.handleWillReconnect(\n                    willReconnectResolved,\n                    event,\n                    SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE,\n                );\n            });\n        }\n    }\n\n    private handleError(event: Event): void {\n        this.dispatchEventOfType(\"error\", event);\n        this.debugLog(\"WebSocket encountered an error.\");\n    }\n\n    private handleWillReconnect(\n        willReconnect: boolean,\n        event: CloseEvent | undefined,\n        denialReason: string,\n    ): void {\n        if (willReconnect) {\n            this.reestablishConnection();\n        } else {\n            this.stopReconnecting(event, denialReason);\n        }\n    }\n\n    private reestablishConnection(): void {\n        const {\n            minReconnectDelay,\n            maxReconnectDelay,\n            reconnectBackoffFactor,\n        } = this.options;\n        this.reconnectCount++;\n        const retryTime = this.nextRetryTime;\n        this.nextRetryTime = Math.max(\n            minReconnectDelay,\n            Math.min(\n                this.nextRetryTime * reconnectBackoffFactor,\n                maxReconnectDelay,\n            ),\n        );\n        setTimeout(() => this.openNewWebSocket(), retryTime);\n        const retryTimeSeconds = (retryTime / 1000) | 0;\n        this.debugLog(\n            `WebSocket was closed. Re-opening in ${retryTimeSeconds} seconds.`,\n        );\n    }\n\n    private stopReconnecting(\n        event: CloseEvent | undefined,\n        debugReason: string,\n    ): void {\n        this.debugLog(debugReason);\n        this.shutdown();\n        if (event) {\n            this.dispatchEventOfType(\"close\", event);\n        }\n    }\n\n    private shutdown(): void {\n        this.isClosed = true;\n        this.clearAllTimeouts();\n        this.messageBuffer = [];\n        this.disposeSocket();\n    }\n\n    private disposeSocket(closeCode?: number, reason?: string): void {\n        if (!this.ws) {\n            return;\n        }\n        // Use noop handlers instead of null because some WebSocket\n        // implementations, such as the one from isomorphic-ws, raise a stink on\n        // unhandled events.\n        this.ws.onerror = noop;\n        this.ws.onclose = noop;\n        this.ws.onmessage = noop;\n        this.ws.onopen = noop;\n        this.ws.close(closeCode, reason);\n        this.ws = undefined;\n    }\n\n    private clearAllTimeouts(): void {\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n    }\n\n    private clearConnectTimeout(): void {\n        if (this.connectTimeoutId != null) {\n            clearTimeout(this.connectTimeoutId);\n            this.connectTimeoutId = undefined;\n        }\n    }\n\n    private clearAllClearTimeout(): void {\n        if (this.allClearTimeoutId != null) {\n            clearTimeout(this.allClearTimeoutId);\n            this.allClearTimeoutId = undefined;\n        }\n    }\n\n    private dispatchEventOfType(type: string, event: any): boolean {\n        switch (type) {\n            case \"close\":\n                if (this.onclose) {\n                    this.onclose(event);\n                }\n                break;\n            case \"error\":\n                if (this.onerror) {\n                    this.onerror(event);\n                }\n                break;\n            case \"message\":\n                if (this.onmessage) {\n                    this.onmessage(event);\n                }\n                break;\n            case \"open\":\n                if (this.onopen) {\n                    this.onopen(event);\n                }\n                break;\n            case \"down\":\n                if (this.ondown) {\n                    this.ondown(event);\n                }\n                break;\n            case \"reopen\":\n                if (this.onreopen) {\n                    this.onreopen(event);\n                }\n                break;\n        }\n        if (type in this.listeners) {\n            this.listeners[type]\n                .slice()\n                .forEach(listener => this.callListener(listener, event));\n        }\n        return !event || !(event as Event).defaultPrevented;\n    }\n\n    private callListener(\n        listener: EventListenerOrEventListenerObject,\n        event: Event,\n    ): void {\n        if (typeof listener === \"function\") {\n            listener.call(this, event);\n        } else {\n            listener.handleEvent.call(this, event);\n        }\n    }\n\n    private debugLog(message: string): void {\n        if (this.options.debug) {\n            // tslint:disable-next-line:no-console\n            console.log(message);\n        }\n    }\n\n    private getTooManyFailedReconnectsMessage(): string {\n        const { maxReconnectAttempts } = this.options;\n        return `Failed to reconnect after ${maxReconnectAttempts} ${pluralize(\n            \"attempt\",\n            maxReconnectAttempts,\n        )}. Closing permanently.`;\n    }\n}\n\nfunction applyDefaultOptions(options: Options): Required<Options> {\n    const result: any = {};\n    Object.keys(SturdyWebSocket.DEFAULT_OPTIONS).forEach(key => {\n        const value = (options as any)[key];\n        result[key] =\n            value === undefined\n                ? (SturdyWebSocket.DEFAULT_OPTIONS as any)[key]\n                : value;\n    });\n    return result;\n}\n\nfunction getDataByteLength(data: any): number | undefined {\n    if (typeof data === \"string\") {\n        // UTF-16 strings use two bytes per character.\n        return 2 * data.length;\n    } else if (data instanceof ArrayBuffer) {\n        return data.byteLength;\n    } else if (data instanceof Blob) {\n        return data.size;\n    } else {\n        return undefined;\n    }\n}\n\nfunction pluralize(s: string, n: number): string {\n    return n === 1 ? s : `${s}s`;\n}\n\nfunction noop(): void {\n    // Nothing.\n}\n"],"names":["getNetworkFromEthers"],"version":3,"file":"alchemy-websocket-provider-6cafeb36.1bc6ed56.js.map","sourceRoot":"/__parcel_source_root/"}
{"mappings":"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","sources":["<anon>","node_modules/alchemy-sdk/dist/esm/alchemy-provider-033c5719.js","node_modules/alchemy-sdk/src/internal/request-batcher.ts","node_modules/alchemy-sdk/src/api/alchemy-provider.ts"],"sourcesContent":["(() => {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"bq21X\", function(module, exports) {\n\n$parcel$export(module.exports, \"AlchemyProvider\", () => $8503b2a3113d52fe$export$999cc40da3fbc6f);\n\nvar $07xSV = parcelRequire(\"07xSV\");\n\nvar $kYIxw = parcelRequire(\"kYIxw\");\n\nvar $i7Wzi = parcelRequire(\"i7Wzi\");\n\nvar $e4bE7 = parcelRequire(\"e4bE7\");\n\n\nparcelRequire(\"kyCZa\");\n\n\n\n/** Maximum size of a batch on the rpc provider. */ const $8503b2a3113d52fe$var$DEFAULT_MAX_REQUEST_BATCH_SIZE = 100;\n/** Timeout interval before the pending batch is sent. */ const $8503b2a3113d52fe$var$DEFAULT_REQUEST_BATCH_DELAY_MS = 10;\n/**\r\n * Internal class to enqueue requests and automatically send/process batches.\r\n *\r\n * The underlying batching mechanism is loosely based on ethers.js's\r\n * `JsonRpcBatchProvider`.\r\n *\r\n * @internal\r\n */ class $8503b2a3113d52fe$var$RequestBatcher {\n    constructor(sendBatchFn, maxBatchSize = $8503b2a3113d52fe$var$DEFAULT_MAX_REQUEST_BATCH_SIZE){\n        this.sendBatchFn = sendBatchFn;\n        this.maxBatchSize = maxBatchSize;\n        /**\r\n         * Array of enqueued requests along with the constructed promise handlers for\r\n         * each request.\r\n         */ this.pendingBatch = [];\n    }\n    /**\r\n     * Enqueues the provided request. The batch is immediately sent if the maximum\r\n     * batch size is reached. Otherwise, the request is enqueued onto a batch that\r\n     * is sent after 10ms.\r\n     *\r\n     * Returns a promise that resolves with the result of the request.\r\n     */ enqueueRequest(request) {\n        return (0, $07xSV._)(this, void 0, void 0, function*() {\n            const inflightRequest = {\n                request: request,\n                resolve: undefined,\n                reject: undefined\n            };\n            const promise = new Promise((resolve, reject)=>{\n                inflightRequest.resolve = resolve;\n                inflightRequest.reject = reject;\n            });\n            this.pendingBatch.push(inflightRequest);\n            if (this.pendingBatch.length === this.maxBatchSize) // Send batch immediately if we are at the maximum batch size.\n            this.sendBatchRequest();\n            else if (!this.pendingBatchTimer) // Schedule batch for next event loop + short duration\n            this.pendingBatchTimer = setTimeout(()=>this.sendBatchRequest(), $8503b2a3113d52fe$var$DEFAULT_REQUEST_BATCH_DELAY_MS);\n            return promise;\n        });\n    }\n    /**\r\n     * Sends the currently queued batches and resets the batch and timer. Processes\r\n     * the batched response results back to the original promises.\r\n     */ sendBatchRequest() {\n        return (0, $07xSV._)(this, void 0, void 0, function*() {\n            // Get the current batch and clear it, so new requests\n            // go into the next batch\n            const batch = this.pendingBatch;\n            this.pendingBatch = [];\n            if (this.pendingBatchTimer) {\n                clearTimeout(this.pendingBatchTimer);\n                this.pendingBatchTimer = undefined;\n            }\n            // Get the request as an array of requests\n            const request = batch.map((inflight)=>inflight.request);\n            return this.sendBatchFn(request).then((result)=>{\n                // For each result, feed it to the correct Promise, depending\n                // on whether it was a success or error\n                batch.forEach((inflightRequest, index)=>{\n                    const payload = result[index];\n                    if (payload.error) {\n                        const error = new Error(payload.error.message);\n                        error.code = payload.error.code;\n                        error.data = payload.error.data;\n                        inflightRequest.reject(error);\n                    } else inflightRequest.resolve(payload.result);\n                });\n            }, (error)=>{\n                batch.forEach((inflightRequest)=>{\n                    inflightRequest.reject(error);\n                });\n            });\n        });\n    }\n}\n/**\r\n * SDK's custom implementation of ethers.js's 'AlchemyProvider'.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an instance of\r\n * {@link Alchemy} and call {@link Alchemy.config.getProvider()}.\r\n *\r\n * @public\r\n */ class $8503b2a3113d52fe$export$999cc40da3fbc6f extends (0, $i7Wzi.JsonRpcProvider) {\n    /** @internal */ constructor(config){\n        // Normalize the API Key to a string.\n        const apiKey = $8503b2a3113d52fe$export$999cc40da3fbc6f.getApiKey(config.apiKey);\n        // Generate our own connection info with the correct endpoint URLs.\n        const alchemyNetwork = $8503b2a3113d52fe$export$999cc40da3fbc6f.getAlchemyNetwork(config.network);\n        const connection = $8503b2a3113d52fe$export$999cc40da3fbc6f.getAlchemyConnectionInfo(alchemyNetwork, apiKey, \"http\");\n        // If a hardcoded url was specified in the config, use that instead of the\n        // provided apiKey or network.\n        if (config.url !== undefined) connection.url = config.url;\n        connection.throttleLimit = config.maxRetries;\n        // Normalize the Alchemy named network input to the network names used by\n        // ethers. This allows the parent super constructor in JsonRpcProvider to\n        // correctly set the network.\n        const ethersNetwork = (0, $07xSV.E)[alchemyNetwork];\n        super(connection, ethersNetwork);\n        this.apiKey = config.apiKey;\n        this.maxRetries = config.maxRetries;\n        this.batchRequests = config.batchRequests;\n        // TODO: support individual headers when calling batch\n        const batcherConnection = Object.assign(Object.assign({}, this.connection), {\n            headers: Object.assign(Object.assign({}, this.connection.headers), {\n                \"Alchemy-Ethers-Sdk-Method\": \"batchSend\"\n            })\n        });\n        const sendBatchFn = (requests)=>{\n            return (0, $e4bE7.fetchJson)(batcherConnection, JSON.stringify(requests));\n        };\n        this.batcher = new $8503b2a3113d52fe$var$RequestBatcher(sendBatchFn);\n        this.modifyFormatter();\n    }\n    /**\r\n     * Overrides the `UrlJsonRpcProvider.getApiKey` method as implemented by\r\n     * ethers.js. Returns the API key for an Alchemy provider.\r\n     *\r\n     * @internal\r\n     * @override\r\n     */ static getApiKey(apiKey) {\n        if (apiKey == null) return 0, $07xSV.D;\n        if (apiKey && typeof apiKey !== \"string\") throw new Error(`Invalid apiKey '${apiKey}' provided. apiKey must be a string.`);\n        return apiKey;\n    }\n    /**\r\n     * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\r\n     *\r\n     * This override allows the SDK to set the provider's network to values not\r\n     * yet supported by ethers.js.\r\n     *\r\n     * @internal\r\n     * @override\r\n     */ static getNetwork(network) {\n        if (typeof network === \"string\" && network in (0, $07xSV.C)) return (0, $07xSV.C)[network];\n        // Call the standard ethers.js getNetwork method for other networks.\n        return (0, $kYIxw.getNetwork)(network);\n    }\n    /**\r\n     * Converts the `Networkish` input to the network enum used by Alchemy.\r\n     *\r\n     * @internal\r\n     */ static getAlchemyNetwork(network) {\n        if (network === undefined) return 0, $07xSV.a;\n        if (typeof network === \"number\") throw new Error(`Invalid network '${network}' provided. Network must be a string.`);\n        // Guaranteed that `typeof network === 'string`.\n        const isValidNetwork = Object.values((0, $07xSV.N)).includes(network);\n        if (!isValidNetwork) throw new Error(`Invalid network '${network}' provided. Network must be one of: ` + `${Object.values((0, $07xSV.N)).join(\", \")}.`);\n        return network;\n    }\n    /**\r\n     * Returns a {@link ConnectionInfo} object compatible with ethers that contains\r\n     * the correct URLs for Alchemy.\r\n     *\r\n     * @internal\r\n     */ static getAlchemyConnectionInfo(network, apiKey, type) {\n        const url = type === \"http\" ? (0, $07xSV.g)(network, apiKey) : (0, $07xSV.b)(network, apiKey);\n        return {\n            headers: (0, $07xSV.I) ? {\n                \"Alchemy-Ethers-Sdk-Version\": (0, $07xSV.V)\n            } : {\n                \"Alchemy-Ethers-Sdk-Version\": (0, $07xSV.V),\n                \"Accept-Encoding\": \"gzip\"\n            },\n            allowGzip: true,\n            url: url\n        };\n    }\n    /**\r\n     * Overrides the method in ethers.js's `StaticJsonRpcProvider` class. This\r\n     * method is called when calling methods on the parent class `BaseProvider`.\r\n     *\r\n     * @override\r\n     */ detectNetwork() {\n        const _super = Object.create(null, {\n            detectNetwork: {\n                get: ()=>super.detectNetwork\n            }\n        });\n        return (0, $07xSV._)(this, void 0, void 0, function*() {\n            let network = this.network;\n            if (network == null) {\n                network = yield _super.detectNetwork.call(this);\n                if (!network) throw new Error(\"No network detected\");\n            }\n            return network;\n        });\n    }\n    _startPending() {\n        (0, $07xSV.l)(\"WARNING: Alchemy Provider does not support pending filters\");\n    }\n    /**\r\n     * Overrides the ether's `isCommunityResource()` method. Returns true if the\r\n     * current api key is the default key.\r\n     *\r\n     * @override\r\n     */ isCommunityResource() {\n        return this.apiKey === (0, $07xSV.D);\n    }\n    /**\r\n     * Overrides the base {@link JsonRpcProvider.send} method to implement custom\r\n     * logic for sending requests to Alchemy.\r\n     *\r\n     * @param method The method name to use for the request.\r\n     * @param params The parameters to use for the request.\r\n     * @override\r\n     * @public\r\n     */ // TODO: Add headers for `perform()` override.\n    send(method, params) {\n        return this._send(method, params, \"send\");\n    }\n    /**\r\n     * DO NOT MODIFY.\r\n     *\r\n     * Original code copied over from ether.js's `JsonRpcProvider.send()`.\r\n     *\r\n     * This method is copied over directly in order to implement custom headers\r\n     *\r\n     * @internal\r\n     */ _send(method, params, methodName, forceBatch = false) {\n        const request = {\n            method: method,\n            params: params,\n            id: this._nextId++,\n            jsonrpc: \"2.0\"\n        };\n        // START MODIFIED CODE\n        const connection = Object.assign({}, this.connection);\n        connection.headers[\"Alchemy-Ethers-Sdk-Method\"] = methodName;\n        if (this.batchRequests || forceBatch) return this.batcher.enqueueRequest(request);\n        // END MODIFIED CODE\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: (0, $07xSV.d)(request),\n            provider: this\n        });\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = [\n            \"eth_chainId\",\n            \"eth_blockNumber\"\n        ].indexOf(method) >= 0;\n        if (cache && this._cache[method]) return this._cache[method];\n        const result = (0, $e4bE7.fetchJson)(this.connection, JSON.stringify(request), $8503b2a3113d52fe$var$getResult).then((result)=>{\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n            return result;\n        }, (error)=>{\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n            throw error;\n        });\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(()=>{\n                // @ts-ignore - This is done by ethers.\n                this._cache[method] = null;\n            }, 0);\n        }\n        return result;\n    }\n    /**\r\n     * Overrides the base `Formatter` class inherited from ethers to support\r\n     * returning custom fields in Ethers response types.\r\n     *\r\n     * For context, ethers has a `Formatter` class that is used to format the\r\n     * response from a JSON-RPC request. Any fields that are not defined in the\r\n     * `Formatter` class are removed from the returned response. By modifying the\r\n     * `Formatter` class in this method, we can add support for fields that are\r\n     * not defined in ethers.\r\n     */ modifyFormatter() {\n        this.formatter.formats[\"receiptLog\"][\"removed\"] = (val)=>{\n            if (typeof val === \"boolean\") return val;\n            return undefined;\n        };\n    }\n}\n/**\r\n * DO NOT MODIFY.\r\n *\r\n * Original code copied over from ether.js's\r\n * `@ethersproject/web/src.ts/index.ts`. Used to support\r\n * {@link AlchemyProvider._send}, which is also copied over.\r\n */ function $8503b2a3113d52fe$var$getResult(payload) {\n    if (payload.error) {\n        const error = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n    return payload.result;\n}\n\n});\n\n})();\n//# sourceMappingURL=alchemy-provider-033c5719.1ec75569.js.map\n","import { _ as __awaiter, D as DEFAULT_ALCHEMY_API_KEY, C as CustomNetworks, a as DEFAULT_NETWORK, N as Network, I as IS_BROWSER, V as VERSION, l as logWarn, d as deepCopy, E as EthersNetwork, g as getAlchemyHttpUrl, b as getAlchemyWsUrl } from './index-03ad9998.js';\nimport { getNetwork } from '@ethersproject/networks';\nimport { JsonRpcProvider } from '@ethersproject/providers';\nimport { fetchJson } from '@ethersproject/web';\nimport './api/utils';\nimport '@ethersproject/bignumber';\nimport 'axios';\nimport '@ethersproject/abstract-provider';\nimport '@ethersproject/wallet';\nimport '@ethersproject/contracts';\n\n/** Maximum size of a batch on the rpc provider. */\r\nconst DEFAULT_MAX_REQUEST_BATCH_SIZE = 100;\r\n/** Timeout interval before the pending batch is sent. */\r\nconst DEFAULT_REQUEST_BATCH_DELAY_MS = 10;\r\n/**\r\n * Internal class to enqueue requests and automatically send/process batches.\r\n *\r\n * The underlying batching mechanism is loosely based on ethers.js's\r\n * `JsonRpcBatchProvider`.\r\n *\r\n * @internal\r\n */\r\nclass RequestBatcher {\r\n    constructor(sendBatchFn, maxBatchSize = DEFAULT_MAX_REQUEST_BATCH_SIZE) {\r\n        this.sendBatchFn = sendBatchFn;\r\n        this.maxBatchSize = maxBatchSize;\r\n        /**\r\n         * Array of enqueued requests along with the constructed promise handlers for\r\n         * each request.\r\n         */\r\n        this.pendingBatch = [];\r\n    }\r\n    /**\r\n     * Enqueues the provided request. The batch is immediately sent if the maximum\r\n     * batch size is reached. Otherwise, the request is enqueued onto a batch that\r\n     * is sent after 10ms.\r\n     *\r\n     * Returns a promise that resolves with the result of the request.\r\n     */\r\n    enqueueRequest(request) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const inflightRequest = {\r\n                request,\r\n                resolve: undefined,\r\n                reject: undefined\r\n            };\r\n            const promise = new Promise((resolve, reject) => {\r\n                inflightRequest.resolve = resolve;\r\n                inflightRequest.reject = reject;\r\n            });\r\n            this.pendingBatch.push(inflightRequest);\r\n            if (this.pendingBatch.length === this.maxBatchSize) {\r\n                // Send batch immediately if we are at the maximum batch size.\r\n                void this.sendBatchRequest();\r\n            }\r\n            else if (!this.pendingBatchTimer) {\r\n                // Schedule batch for next event loop + short duration\r\n                this.pendingBatchTimer = setTimeout(() => this.sendBatchRequest(), DEFAULT_REQUEST_BATCH_DELAY_MS);\r\n            }\r\n            return promise;\r\n        });\r\n    }\r\n    /**\r\n     * Sends the currently queued batches and resets the batch and timer. Processes\r\n     * the batched response results back to the original promises.\r\n     */\r\n    sendBatchRequest() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // Get the current batch and clear it, so new requests\r\n            // go into the next batch\r\n            const batch = this.pendingBatch;\r\n            this.pendingBatch = [];\r\n            if (this.pendingBatchTimer) {\r\n                clearTimeout(this.pendingBatchTimer);\r\n                this.pendingBatchTimer = undefined;\r\n            }\r\n            // Get the request as an array of requests\r\n            const request = batch.map(inflight => inflight.request);\r\n            return this.sendBatchFn(request).then(result => {\r\n                // For each result, feed it to the correct Promise, depending\r\n                // on whether it was a success or error\r\n                batch.forEach((inflightRequest, index) => {\r\n                    const payload = result[index];\r\n                    if (payload.error) {\r\n                        const error = new Error(payload.error.message);\r\n                        error.code = payload.error.code;\r\n                        error.data = payload.error.data;\r\n                        inflightRequest.reject(error);\r\n                    }\r\n                    else {\r\n                        inflightRequest.resolve(payload.result);\r\n                    }\r\n                });\r\n            }, error => {\r\n                batch.forEach(inflightRequest => {\r\n                    inflightRequest.reject(error);\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\n\n/**\r\n * SDK's custom implementation of ethers.js's 'AlchemyProvider'.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an instance of\r\n * {@link Alchemy} and call {@link Alchemy.config.getProvider()}.\r\n *\r\n * @public\r\n */\r\nclass AlchemyProvider extends JsonRpcProvider {\r\n    /** @internal */\r\n    constructor(config) {\r\n        // Normalize the API Key to a string.\r\n        const apiKey = AlchemyProvider.getApiKey(config.apiKey);\r\n        // Generate our own connection info with the correct endpoint URLs.\r\n        const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\r\n        const connection = AlchemyProvider.getAlchemyConnectionInfo(alchemyNetwork, apiKey, 'http');\r\n        // If a hardcoded url was specified in the config, use that instead of the\r\n        // provided apiKey or network.\r\n        if (config.url !== undefined) {\r\n            connection.url = config.url;\r\n        }\r\n        connection.throttleLimit = config.maxRetries;\r\n        // Normalize the Alchemy named network input to the network names used by\r\n        // ethers. This allows the parent super constructor in JsonRpcProvider to\r\n        // correctly set the network.\r\n        const ethersNetwork = EthersNetwork[alchemyNetwork];\r\n        super(connection, ethersNetwork);\r\n        this.apiKey = config.apiKey;\r\n        this.maxRetries = config.maxRetries;\r\n        this.batchRequests = config.batchRequests;\r\n        // TODO: support individual headers when calling batch\r\n        const batcherConnection = Object.assign(Object.assign({}, this.connection), { headers: Object.assign(Object.assign({}, this.connection.headers), { 'Alchemy-Ethers-Sdk-Method': 'batchSend' }) });\r\n        const sendBatchFn = (requests) => {\r\n            return fetchJson(batcherConnection, JSON.stringify(requests));\r\n        };\r\n        this.batcher = new RequestBatcher(sendBatchFn);\r\n        this.modifyFormatter();\r\n    }\r\n    /**\r\n     * Overrides the `UrlJsonRpcProvider.getApiKey` method as implemented by\r\n     * ethers.js. Returns the API key for an Alchemy provider.\r\n     *\r\n     * @internal\r\n     * @override\r\n     */\r\n    static getApiKey(apiKey) {\r\n        if (apiKey == null) {\r\n            return DEFAULT_ALCHEMY_API_KEY;\r\n        }\r\n        if (apiKey && typeof apiKey !== 'string') {\r\n            throw new Error(`Invalid apiKey '${apiKey}' provided. apiKey must be a string.`);\r\n        }\r\n        return apiKey;\r\n    }\r\n    /**\r\n     * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\r\n     *\r\n     * This override allows the SDK to set the provider's network to values not\r\n     * yet supported by ethers.js.\r\n     *\r\n     * @internal\r\n     * @override\r\n     */\r\n    static getNetwork(network) {\r\n        if (typeof network === 'string' && network in CustomNetworks) {\r\n            return CustomNetworks[network];\r\n        }\r\n        // Call the standard ethers.js getNetwork method for other networks.\r\n        return getNetwork(network);\r\n    }\r\n    /**\r\n     * Converts the `Networkish` input to the network enum used by Alchemy.\r\n     *\r\n     * @internal\r\n     */\r\n    static getAlchemyNetwork(network) {\r\n        if (network === undefined) {\r\n            return DEFAULT_NETWORK;\r\n        }\r\n        if (typeof network === 'number') {\r\n            throw new Error(`Invalid network '${network}' provided. Network must be a string.`);\r\n        }\r\n        // Guaranteed that `typeof network === 'string`.\r\n        const isValidNetwork = Object.values(Network).includes(network);\r\n        if (!isValidNetwork) {\r\n            throw new Error(`Invalid network '${network}' provided. Network must be one of: ` +\r\n                `${Object.values(Network).join(', ')}.`);\r\n        }\r\n        return network;\r\n    }\r\n    /**\r\n     * Returns a {@link ConnectionInfo} object compatible with ethers that contains\r\n     * the correct URLs for Alchemy.\r\n     *\r\n     * @internal\r\n     */\r\n    static getAlchemyConnectionInfo(network, apiKey, type) {\r\n        const url = type === 'http'\r\n            ? getAlchemyHttpUrl(network, apiKey)\r\n            : getAlchemyWsUrl(network, apiKey);\r\n        return {\r\n            headers: IS_BROWSER\r\n                ? {\r\n                    'Alchemy-Ethers-Sdk-Version': VERSION\r\n                }\r\n                : {\r\n                    'Alchemy-Ethers-Sdk-Version': VERSION,\r\n                    'Accept-Encoding': 'gzip'\r\n                },\r\n            allowGzip: true,\r\n            url\r\n        };\r\n    }\r\n    /**\r\n     * Overrides the method in ethers.js's `StaticJsonRpcProvider` class. This\r\n     * method is called when calling methods on the parent class `BaseProvider`.\r\n     *\r\n     * @override\r\n     */\r\n    detectNetwork() {\r\n        const _super = Object.create(null, {\r\n            detectNetwork: { get: () => super.detectNetwork }\r\n        });\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let network = this.network;\r\n            if (network == null) {\r\n                network = yield _super.detectNetwork.call(this);\r\n                if (!network) {\r\n                    throw new Error('No network detected');\r\n                }\r\n            }\r\n            return network;\r\n        });\r\n    }\r\n    _startPending() {\r\n        logWarn('WARNING: Alchemy Provider does not support pending filters');\r\n    }\r\n    /**\r\n     * Overrides the ether's `isCommunityResource()` method. Returns true if the\r\n     * current api key is the default key.\r\n     *\r\n     * @override\r\n     */\r\n    isCommunityResource() {\r\n        return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\r\n    }\r\n    /**\r\n     * Overrides the base {@link JsonRpcProvider.send} method to implement custom\r\n     * logic for sending requests to Alchemy.\r\n     *\r\n     * @param method The method name to use for the request.\r\n     * @param params The parameters to use for the request.\r\n     * @override\r\n     * @public\r\n     */\r\n    // TODO: Add headers for `perform()` override.\r\n    send(method, params) {\r\n        return this._send(method, params, 'send');\r\n    }\r\n    /**\r\n     * DO NOT MODIFY.\r\n     *\r\n     * Original code copied over from ether.js's `JsonRpcProvider.send()`.\r\n     *\r\n     * This method is copied over directly in order to implement custom headers\r\n     *\r\n     * @internal\r\n     */\r\n    _send(method, params, methodName, forceBatch = false) {\r\n        const request = {\r\n            method,\r\n            params,\r\n            id: this._nextId++,\r\n            jsonrpc: '2.0'\r\n        };\r\n        // START MODIFIED CODE\r\n        const connection = Object.assign({}, this.connection);\r\n        connection.headers['Alchemy-Ethers-Sdk-Method'] = methodName;\r\n        if (this.batchRequests || forceBatch) {\r\n            return this.batcher.enqueueRequest(request);\r\n        }\r\n        // END MODIFIED CODE\r\n        this.emit('debug', {\r\n            action: 'request',\r\n            request: deepCopy(request),\r\n            provider: this\r\n        });\r\n        // We can expand this in the future to any call, but for now these\r\n        // are the biggest wins and do not require any serializing parameters.\r\n        const cache = ['eth_chainId', 'eth_blockNumber'].indexOf(method) >= 0;\r\n        if (cache && this._cache[method]) {\r\n            return this._cache[method];\r\n        }\r\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then(result => {\r\n            this.emit('debug', {\r\n                action: 'response',\r\n                request,\r\n                response: result,\r\n                provider: this\r\n            });\r\n            return result;\r\n        }, error => {\r\n            this.emit('debug', {\r\n                action: 'response',\r\n                error,\r\n                request,\r\n                provider: this\r\n            });\r\n            throw error;\r\n        });\r\n        // Cache the fetch, but clear it on the next event loop\r\n        if (cache) {\r\n            this._cache[method] = result;\r\n            setTimeout(() => {\r\n                // @ts-ignore - This is done by ethers.\r\n                this._cache[method] = null;\r\n            }, 0);\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Overrides the base `Formatter` class inherited from ethers to support\r\n     * returning custom fields in Ethers response types.\r\n     *\r\n     * For context, ethers has a `Formatter` class that is used to format the\r\n     * response from a JSON-RPC request. Any fields that are not defined in the\r\n     * `Formatter` class are removed from the returned response. By modifying the\r\n     * `Formatter` class in this method, we can add support for fields that are\r\n     * not defined in ethers.\r\n     */\r\n    modifyFormatter() {\r\n        this.formatter.formats['receiptLog']['removed'] = val => {\r\n            if (typeof val === 'boolean') {\r\n                return val;\r\n            }\r\n            return undefined;\r\n        };\r\n    }\r\n}\r\n/**\r\n * DO NOT MODIFY.\r\n *\r\n * Original code copied over from ether.js's\r\n * `@ethersproject/web/src.ts/index.ts`. Used to support\r\n * {@link AlchemyProvider._send}, which is also copied over.\r\n */\r\nfunction getResult(payload) {\r\n    if (payload.error) {\r\n        const error = new Error(payload.error.message);\r\n        error.code = payload.error.code;\r\n        error.data = payload.error.data;\r\n        throw error;\r\n    }\r\n    return payload.result;\r\n}\n\nexport { AlchemyProvider };\n//# sourceMappingURL=alchemy-provider-033c5719.js.map\n","import { JsonRpcRequest, JsonRpcResponse } from './internal-types';\n\n/** Maximum size of a batch on the rpc provider. */\nconst DEFAULT_MAX_REQUEST_BATCH_SIZE = 100;\n\n/** Timeout interval before the pending batch is sent. */\nconst DEFAULT_REQUEST_BATCH_DELAY_MS = 10;\n\n/**\n * Internal class to enqueue requests and automatically send/process batches.\n *\n * The underlying batching mechanism is loosely based on ethers.js's\n * `JsonRpcBatchProvider`.\n *\n * @internal\n */\nexport class RequestBatcher {\n  /** Timeout timer that periodically sends the pending batch. */\n  private pendingBatchTimer: NodeJS.Timer | undefined;\n\n  /**\n   * Array of enqueued requests along with the constructed promise handlers for\n   * each request.\n   */\n  private pendingBatch: Array<BatchRequest> = [];\n\n  constructor(\n    private readonly sendBatchFn: SendBatchFn,\n    private readonly maxBatchSize = DEFAULT_MAX_REQUEST_BATCH_SIZE\n  ) {}\n\n  /**\n   * Enqueues the provided request. The batch is immediately sent if the maximum\n   * batch size is reached. Otherwise, the request is enqueued onto a batch that\n   * is sent after 10ms.\n   *\n   * Returns a promise that resolves with the result of the request.\n   */\n  async enqueueRequest(request: JsonRpcRequest): Promise<any> {\n    const inflightRequest: BatchRequest = {\n      request,\n      resolve: undefined,\n      reject: undefined\n    };\n\n    const promise = new Promise((resolve, reject) => {\n      inflightRequest.resolve = resolve;\n      inflightRequest.reject = reject;\n    });\n\n    this.pendingBatch.push(inflightRequest);\n\n    if (this.pendingBatch.length === this.maxBatchSize) {\n      // Send batch immediately if we are at the maximum batch size.\n      void this.sendBatchRequest();\n    } else if (!this.pendingBatchTimer) {\n      // Schedule batch for next event loop + short duration\n      this.pendingBatchTimer = setTimeout(\n        () => this.sendBatchRequest(),\n        DEFAULT_REQUEST_BATCH_DELAY_MS\n      );\n    }\n\n    return promise;\n  }\n\n  /**\n   * Sends the currently queued batches and resets the batch and timer. Processes\n   * the batched response results back to the original promises.\n   */\n  private async sendBatchRequest(): Promise<void> {\n    // Get the current batch and clear it, so new requests\n    // go into the next batch\n    const batch = this.pendingBatch;\n    this.pendingBatch = [];\n    if (this.pendingBatchTimer) {\n      clearTimeout(this.pendingBatchTimer);\n      this.pendingBatchTimer = undefined;\n    }\n\n    // Get the request as an array of requests\n    const request = batch.map(inflight => inflight.request);\n\n    return this.sendBatchFn(request).then(\n      result => {\n        // For each result, feed it to the correct Promise, depending\n        // on whether it was a success or error\n        batch.forEach((inflightRequest, index) => {\n          const payload = result[index];\n          if (payload.error) {\n            const error = new Error(payload.error.message);\n            (error as any).code = payload.error.code;\n            (error as any).data = payload.error.data;\n            inflightRequest.reject!(error);\n          } else {\n            inflightRequest.resolve!(payload.result);\n          }\n        });\n      },\n      error => {\n        batch.forEach(inflightRequest => {\n          inflightRequest.reject!(error);\n        });\n      }\n    );\n  }\n}\n\n/** Function type to match the `fetchJson` function in ethers. */\ntype SendBatchFn = (reqs: JsonRpcRequest[]) => Promise<JsonRpcResponse[]>;\n\n/**\n * Internal interface to represent a request on a batch along with the promises to resolve it.\n */\ninterface BatchRequest {\n  request: JsonRpcRequest;\n  resolve?: (result: any) => void;\n  reject?: (error: Error) => void;\n}\n","import {\n  Network as NetworkFromEthers,\n  Networkish,\n  getNetwork as getNetworkFromEthers\n} from '@ethersproject/networks';\nimport { deepCopy } from '@ethersproject/properties';\nimport {\n  CommunityResourcable,\n  JsonRpcProvider\n} from '@ethersproject/providers';\nimport { ConnectionInfo, fetchJson } from '@ethersproject/web';\n\nimport { JsonRpcRequest, JsonRpcResponse } from '../internal/internal-types';\nimport { RequestBatcher } from '../internal/request-batcher';\nimport { Network } from '../types/types';\nimport {\n  CustomNetworks,\n  DEFAULT_ALCHEMY_API_KEY,\n  DEFAULT_NETWORK,\n  EthersNetwork,\n  getAlchemyHttpUrl,\n  getAlchemyWsUrl\n} from '../util/const';\nimport { logWarn } from '../util/logger';\nimport { IS_BROWSER } from '../util/util';\nimport { VERSION } from '../version';\nimport { AlchemyConfig } from './alchemy-config';\n\n/**\n * SDK's custom implementation of ethers.js's 'AlchemyProvider'.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link Alchemy} and call {@link Alchemy.config.getProvider()}.\n *\n * @public\n */\nexport class AlchemyProvider\n  extends JsonRpcProvider\n  implements CommunityResourcable\n{\n  readonly apiKey: string;\n  readonly maxRetries: number;\n  readonly batchRequests: boolean;\n\n  /**\n   * VISIBLE ONLY FOR TESTING\n   *@internal\n   */\n  readonly batcher: RequestBatcher;\n\n  /** @internal */\n  constructor(config: AlchemyConfig) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'http'\n    );\n\n    // If a hardcoded url was specified in the config, use that instead of the\n    // provided apiKey or network.\n    if (config.url !== undefined) {\n      connection.url = config.url;\n    }\n\n    connection.throttleLimit = config.maxRetries;\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(connection, ethersNetwork);\n\n    this.apiKey = config.apiKey;\n    this.maxRetries = config.maxRetries;\n    this.batchRequests = config.batchRequests;\n\n    // TODO: support individual headers when calling batch\n    const batcherConnection = {\n      ...this.connection,\n      headers: {\n        ...this.connection.headers,\n        'Alchemy-Ethers-Sdk-Method': 'batchSend'\n      }\n    };\n    const sendBatchFn = (\n      requests: JsonRpcRequest[]\n    ): Promise<JsonRpcResponse[]> => {\n      return fetchJson(batcherConnection, JSON.stringify(requests));\n    };\n    this.batcher = new RequestBatcher(sendBatchFn);\n\n    this.modifyFormatter();\n  }\n\n  /**\n   * Overrides the `UrlJsonRpcProvider.getApiKey` method as implemented by\n   * ethers.js. Returns the API key for an Alchemy provider.\n   *\n   * @internal\n   * @override\n   */\n  static getApiKey(apiKey: any): string {\n    if (apiKey == null) {\n      return DEFAULT_ALCHEMY_API_KEY;\n    }\n    if (apiKey && typeof apiKey !== 'string') {\n      throw new Error(\n        `Invalid apiKey '${apiKey}' provided. apiKey must be a string.`\n      );\n    }\n    return apiKey;\n  }\n\n  /**\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\n   *\n   * This override allows the SDK to set the provider's network to values not\n   * yet supported by ethers.js.\n   *\n   * @internal\n   * @override\n   */\n  static getNetwork(network: Networkish): NetworkFromEthers {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetworkFromEthers(network);\n  }\n\n  /**\n   * Converts the `Networkish` input to the network enum used by Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyNetwork(network?: Networkish): Network {\n    if (network === undefined) {\n      return DEFAULT_NETWORK;\n    }\n\n    if (typeof network === 'number') {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be a string.`\n      );\n    }\n\n    // Guaranteed that `typeof network === 'string`.\n    const isValidNetwork = Object.values(Network).includes(network as Network);\n    if (!isValidNetwork) {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be one of: ` +\n          `${Object.values(Network).join(', ')}.`\n      );\n    }\n    return network as Network;\n  }\n\n  /**\n   * Returns a {@link ConnectionInfo} object compatible with ethers that contains\n   * the correct URLs for Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyConnectionInfo(\n    network: Network,\n    apiKey: string,\n    type: 'wss' | 'http'\n  ): ConnectionInfo {\n    const url =\n      type === 'http'\n        ? getAlchemyHttpUrl(network, apiKey)\n        : getAlchemyWsUrl(network, apiKey);\n    return {\n      headers: IS_BROWSER\n        ? {\n            'Alchemy-Ethers-Sdk-Version': VERSION\n          }\n        : {\n            'Alchemy-Ethers-Sdk-Version': VERSION,\n            'Accept-Encoding': 'gzip'\n          },\n      allowGzip: true,\n      url\n    };\n  }\n\n  /**\n   * Overrides the method in ethers.js's `StaticJsonRpcProvider` class. This\n   * method is called when calling methods on the parent class `BaseProvider`.\n   *\n   * @override\n   */\n  async detectNetwork(): Promise<NetworkFromEthers> {\n    let network = this.network;\n    if (network == null) {\n      network = await super.detectNetwork();\n\n      if (!network) {\n        throw new Error('No network detected');\n      }\n    }\n    return network;\n  }\n\n  _startPending(): void {\n    logWarn('WARNING: Alchemy Provider does not support pending filters');\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * Overrides the base {@link JsonRpcProvider.send} method to implement custom\n   * logic for sending requests to Alchemy.\n   *\n   * @param method The method name to use for the request.\n   * @param params The parameters to use for the request.\n   * @override\n   * @public\n   */\n  // TODO: Add headers for `perform()` override.\n  send(method: string, params: Array<any>): Promise<any> {\n    return this._send(method, params, 'send');\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `JsonRpcProvider.send()`.\n   *\n   * This method is copied over directly in order to implement custom headers\n   *\n   * @internal\n   */\n  _send(\n    method: string,\n    params: Array<any>,\n    methodName: string,\n    forceBatch = false\n  ): Promise<any> {\n    const request = {\n      method,\n      params,\n      id: this._nextId++,\n      jsonrpc: '2.0'\n    };\n\n    // START MODIFIED CODE\n    const connection = { ...this.connection };\n    connection.headers!['Alchemy-Ethers-Sdk-Method'] = methodName;\n\n    if (this.batchRequests || forceBatch) {\n      return this.batcher.enqueueRequest(request as JsonRpcRequest);\n    }\n    // END MODIFIED CODE\n\n    this.emit('debug', {\n      action: 'request',\n      request: deepCopy(request),\n      provider: this\n    });\n\n    // We can expand this in the future to any call, but for now these\n    // are the biggest wins and do not require any serializing parameters.\n    const cache = ['eth_chainId', 'eth_blockNumber'].indexOf(method) >= 0;\n    if (cache && this._cache[method]) {\n      return this._cache[method];\n    }\n\n    const result = fetchJson(\n      this.connection,\n      JSON.stringify(request),\n      getResult\n    ).then(\n      result => {\n        this.emit('debug', {\n          action: 'response',\n          request,\n          response: result,\n          provider: this\n        });\n\n        return result;\n      },\n      error => {\n        this.emit('debug', {\n          action: 'response',\n          error,\n          request,\n          provider: this\n        });\n\n        throw error;\n      }\n    );\n\n    // Cache the fetch, but clear it on the next event loop\n    if (cache) {\n      this._cache[method] = result;\n      setTimeout(() => {\n        // @ts-ignore - This is done by ethers.\n        this._cache[method] = null;\n      }, 0);\n    }\n\n    return result;\n  }\n\n  /**\n   * Overrides the base `Formatter` class inherited from ethers to support\n   * returning custom fields in Ethers response types.\n   *\n   * For context, ethers has a `Formatter` class that is used to format the\n   * response from a JSON-RPC request. Any fields that are not defined in the\n   * `Formatter` class are removed from the returned response. By modifying the\n   * `Formatter` class in this method, we can add support for fields that are\n   * not defined in ethers.\n   */\n  private modifyFormatter(): void {\n    this.formatter.formats['receiptLog']['removed'] = val => {\n      if (typeof val === 'boolean') {\n        return val;\n      }\n      return undefined;\n    };\n  }\n}\n\n/**\n * DO NOT MODIFY.\n *\n * Original code copied over from ether.js's\n * `@ethersproject/web/src.ts/index.ts`. Used to support\n * {@link AlchemyProvider._send}, which is also copied over.\n */\nfunction getResult(payload: {\n  error?: { code?: number; data?: any; message?: string };\n  result?: any;\n}): any {\n  if (payload.error) {\n    const error: any = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n\n  return payload.result;\n}\n"],"names":["parcelRequire","parcelRegister","$parcel$global","globalThis","register","module","exports","Object","defineProperty","get","$8503b2a3113d52fe$export$999cc40da3fbc6f","set","s","enumerable","configurable","$07xSV","$kYIxw","$i7Wzi","$e4bE7","$8503b2a3113d52fe$var$RequestBatcher","constructor","sendBatchFn","maxBatchSize","pendingBatch","enqueueRequest","request","_","inflightRequest","resolve","undefined","reject","promise","Promise","push","length","sendBatchRequest","pendingBatchTimer","setTimeout","batch","clearTimeout","map","inflight","then","result","forEach","index","payload","error","Error","message","code","data","JsonRpcProvider","config","apiKey","getApiKey","alchemyNetwork","getAlchemyNetwork","network","connection","getAlchemyConnectionInfo","url","throttleLimit","maxRetries","ethersNetwork","E","batchRequests","batcherConnection","assign","headers","batcher","requests","fetchJson","JSON","stringify","modifyFormatter","D","getNetwork","C","a","isValidNetwork","values","N","includes","join","type","g","b","I","V","allowGzip","detectNetwork","_super","create","call","_startPending","l","isCommunityResource","send","method","params","_send","methodName","forceBatch","id","_nextId","jsonrpc","emit","action","d","provider","cache","indexOf","_cache","$8503b2a3113d52fe$var$getResult","response","formatter","formats","val","getNetworkFromEthers"],"version":3,"file":"alchemy-provider-033c5719.1ec75569.js.map"}